namespace Skew {
  enum DiagnosticKind {
    ERROR
    WARNING
  }

  class Fix {
    const kind FixKind
    const range Range
    const description string
    const replacement string
  }

  enum FixKind {
    ARRAY_SYNTAX
    CASE_BRACES
    CASE_COMMA
    EXTENDS_IMPLEMENTS
    EXTRA_CALL_PARENTHESES
    EXTRA_CAST
    EXTRA_COLON
    EXTRA_COMMA
    EXTRA_DEF_PARENTHESES
    EXTRA_SEMICOLON
    FOR_LOOP_VAR
    MISSING_DEF
    MISSING_VAR
    NEED_VAR
    NEW_OPERATOR
    NEW_RETURN_TYPE
    OCTAL_ADD_PREFIX
    OCTAL_REMOVE_ZEROS
    OPERATOR_TYPO
    SELF_VS_THIS
    SINGLE_QUOTES
    SLASH_COMMENT
    SYMBOL_TYPO
    UNNECESSARY_PARENTHESES
    VOID_RETURN
  }

  class Diagnostic {
    const kind DiagnosticKind
    const range Range
    const text string
    const wasWarning bool
    var noteRange Range = null
    var noteText = ""
    var fixes List<Fix> = null

    def withFix(kind FixKind, range Range, description string, replacement string) Diagnostic {
      if range != null && replacement != null {
        (fixes ?= []).append(Fix.new(kind, range, description, replacement))
      }
      return self
    }

    def withNote(range Range, text string) Diagnostic {
      if range != null {
        noteRange = range
        noteText = text
      }
      return self
    }
  }

  namespace Diagnostic {
    def format(kind string, range Range, text string) string {
      if range == null {
        return "\(kind): \(text)\n"
      }
      var formatted = range.format(0)
      return "\(range.locationString): \(kind): \(text)\n\(formatted.line)\n\(formatted.range)\n"
    }
  }

  class Log {
    var diagnostics List<Diagnostic> = []
    var appendCallback fn(Diagnostic) = null
    var warningsAreErrors = false
    var _warningCount = 0
    var _errorCount = 0
    var _wasWarningCount = 0

    def isEmpty bool {
      return diagnostics.isEmpty
    }

    def hasErrors bool {
      return _errorCount != 0
    }

    def hasWarnings bool {
      return _warningCount != 0
    }

    def warningCount int {
      return _warningCount
    }

    def errorCount int {
      return _errorCount
    }

    def wasWarningCount int {
      return _wasWarningCount
    }

    def newError(range Range, text string) Diagnostic {
      return Diagnostic.new(.ERROR, range, text, false)
    }

    def newWarning(range Range, text string) Diagnostic {
      return Diagnostic.new(warningsAreErrors ? .ERROR : .WARNING, range, text, warningsAreErrors)
    }

    def toString string {
      var builder = StringBuilder.new

      # Emit the log assuming an infinite terminal width
      for diagnostic in diagnostics {
        builder.append(Diagnostic.format(diagnostic.kind == .ERROR ? "error" : "warning", diagnostic.range, diagnostic.text))

        # Append notes after the diagnostic they apply to
        if diagnostic.noteRange != null {
          builder.append(Diagnostic.format("note", diagnostic.noteRange, diagnostic.noteText))
        }
      }

      return builder.toString
    }

    # This is useful for visualizing the diagnostic fixes
    def fixesToString string {
      var builder = StringBuilder.new

      for diagnostic in diagnostics {
        if diagnostic.fixes != null {
          for fix in diagnostic.fixes {
            var formatted = fix.range.format(0)
            var index = formatted.range.lastIndexOf(" ")
            var indent = index != -1 ? formatted.range.slice(0, index + 1) : ""
            builder.append(fix.range.locationString + ": fix: " + fix.description + "\n")
            builder.append("\(formatted.line)\n\(formatted.range)\n\(indent)[\(fix.replacement)]\n")
          }
        }
      }

      return builder.toString
    }

    def append(diagnostic Diagnostic) {
      diagnostics.append(diagnostic)
      if diagnostic.kind == .ERROR {
        _errorCount++
      } else {
        _warningCount++
      }
      if diagnostic.wasWarning {
        _wasWarningCount++
      }
      if appendCallback != null {
        appendCallback(diagnostic)
      }
    }
  }

  # Syntax warnings can be thought of as linting
  class Log {
    def syntaxWarningIgnoredCommentInParser(range Range) {
      append(newWarning(range, "This comment was ignored by the parser"))
    }

    def syntaxWarningIgnoredCommentInEmitter(range Range) {
      append(newWarning(range, "This comment was ignored by the emitter"))
    }

    def syntaxWarningOctal(range Range) {
      var text = range.toString
      while text.startsWith("0") {
        text = text.slice(1)
      }
      append(newWarning(range, "Number interpreted as decimal (use the prefix \"0o\" for octal numbers)")
        .withFix(.OCTAL_REMOVE_ZEROS, range, "Remove the leading zeros to avoid confusion", text)
        .withFix(.OCTAL_ADD_PREFIX, range, "Add the prefix \"0o\" to interpret the number as octal", "0o" + text))
    }

    def syntaxWarningExtraParentheses(range Range) {
      var leftSpace = range.rangeIncludingLeftWhitespace.start == range.start ? " " : ""
      var rightSpace = range.rangeIncludingRightWhitespace.end == range.end ? " " : ""
      var text = range.toString
      append(
        newWarning(range, "Unnecessary parentheses")
        .withFix(.UNNECESSARY_PARENTHESES, range, "Remove parentheses", leftSpace + text.slice(1, text.count - 1) + rightSpace))
    }

    def syntaxWarningExtraComma(range Range) {
      append(
        newWarning(range, "Unnecessary comma")
        .withFix(.EXTRA_COMMA, range, "Remove comma", ""))
    }
  }

  class Log {
    def syntaxErrorInvalidEscapeSequence(range Range) {
      append(newError(range, "Invalid escape sequence"))
    }

    def syntaxErrorIntegerLiteralTooLarge(range Range) {
      append(newError(range, "Integer literal is too big to fit in 32 bits"))
    }

    def syntaxErrorInvalidCharacter(range Range) {
      append(
        newError(range, "Use double quotes for strings (single quotes are for character literals)")
        .withFix(.SINGLE_QUOTES, range, "Replace single quotes with double quotes", replaceSingleQuotesWithDoubleQuotes(range.toString)))
    }

    def syntaxErrorExtraData(range Range, text string) {
      append(newError(range, "Syntax error \"\(text == "\"" ? "\\\"": text)\""))
    }

    def syntaxErrorExtraColonBeforeType(range Range) {
      append(
        newError(range, "Do not use a colon before a type expression")
        .withFix(.EXTRA_COLON, range, "Remove the colon", ""))
    }

    def syntaxErrorNewOperator(range Range, correction string) {
      append(
        newError(range, "There is no \"new\" operator, use \"\(correction)\" instead")
        .withFix(.NEW_OPERATOR, range, "Replace with \"\(correction)\"", correction))
    }

    def syntaxErrorExtendsKeyword(range Range) {
      append(
        newError(range, "Use \":\" instead of \"extends\" to indicate a base class")
        .withFix(.EXTENDS_IMPLEMENTS, range, "Replace \"extends\" with \":\"", ":"))
    }

    def syntaxErrorImplementsKeyword(range Range) {
      append(
        newError(range, "Use \"::\" instead of \"implements\" to indicate implemented interfaces")
        .withFix(.EXTENDS_IMPLEMENTS, range, "Replace \"implements\" with \"::\"", "::"))
    }

    def syntaxErrorMissingVar(range Range) {
      append(
        newError(range, "Use \"var\" before variable declarations")
        .withFix(.MISSING_VAR, range, "Insert \"var\"", "var \(range)"))
    }

    def syntaxErrorMissingDef(range Range) {
      append(
        newError(range, "Use \"def\" before function declarations")
        .withFix(.MISSING_DEF, range, "Insert \"def\"", "def \(range)"))
    }

    def syntaxErrorStaticKeyword(range Range, parentKind SymbolKind, parentName string) {
      append(
        newError(range, parentKind == .OBJECT_GLOBAL || parentKind == .OBJECT_NAMESPACE
          ? "There is no \"static\" keyword"
          : "There is no \"static\" keyword (declare this symbol in a namespace called \"\(parentName)\" instead)"))
    }

    def syntaxErrorPublicKeyword(range Range) {
      append(newError(range, "There is no \"public\" keyword"))
    }

    def syntaxErrorPrivateOrProtected(range Range) {
      append(newError(range, "There is no \"\(range)\" keyword (to give something protected access, use a name starting with \"_\" instead)"))
    }

    def syntaxErrorExpectedCommaBetweenCases(range Range) {
      append(
        newError(range, "Use a comma between multiple values in a case statement (example: \"case 1, 2, 3 { ... }\")")
        .withFix(.CASE_COMMA, range, "Replace this with a comma", ","))
    }

    def syntaxErrorColonAfterCaseOrDefault(range Range, breakRange Range) {
      var diagnostic = newError(range, "Surround the body of case and default statements with \"{\" and \"}\" instead of \":\" and \"break\"")

      if breakRange != null {
        assert(range.source == breakRange.source)

        var start = range.source.indexToLineColumn(range.end)
        var end = range.source.indexToLineColumn(breakRange.start)
        var text = range.source.contents.slice(range.end, breakRange.start)

        # Use the indentation of the case statement for the "}"
        if start.line < end.line {
          text = text.slice(0, text.count - end.column) +
            indentOfLine(range.source.contentsOfLine(start.line)) +
            lineWithoutIndent(range.source.contentsOfLine(end.line).slice(0, end.column))
        }

        diagnostic.withFix(.CASE_BRACES, Range.span(range.rangeIncludingLeftWhitespace, breakRange),
          "Replace \":\" and \"break\" with \"{\" and \"}\"", " {" + text + "}")
      }

      append(diagnostic)
    }

    def syntaxErrorOperatorTypo(range Range, correction string) {
      append(
        newError(range, "Use the \"\(correction)\" operator instead")
        .withFix(.OPERATOR_TYPO, range, "Replace with \"\(correction)\"", correction))
    }

    def syntaxErrorExtraVarInForLoop(range Range) {
      append(
        newError(range, "The \"var\" keyword is unnecessary here since for loops automatically declare their variables")
        .withFix(.FOR_LOOP_VAR, range?.rangeIncludingRightWhitespace, "Remove \"var\"", ""))
    }

    def syntaxErrorWrongListSyntax(range Range, correction string) {
      append(
        newError(range, "The array type is \"List<T>\"")
        .withFix(.ARRAY_SYNTAX, range, "Replace with \"\(correction)\"", correction))
    }

    def syntaxErrorSlashComment(range Range) {
      var text = range.toString
      var last = text.count - 1
      assert(text.startsWith("//"))
      if text[last] == '\n' {
        text = text.slice(0, last)
        range = range.fromStart(last)
      }

      # Change a run of "////" into "####"
      var replacement = ""
      for i in 1..text.count {
        if text[i] == '/' {
          replacement += "#"
        } else {
          replacement += text.slice(i)
          break
        }
      }

      append(
        newError(range, "Comments start with \"#\" instead of \"//\"")
        .withFix(.SLASH_COMMENT, range, "Replace \"//\" with \"#\"", replacement))
    }

    def syntaxErrorUnexpectedToken(token Token) {
      append(newError(token.range, "Unexpected \(token.kind)"))
    }

    def syntaxErrorExpectedToken(range Range, found TokenKind, expected TokenKind) {
      var diagnostic = newError(range, "Expected \(expected) but found \(found)")
      if found == .SEMICOLON && expected == .NEWLINE {
        diagnostic.withFix(.EXTRA_SEMICOLON, range, "Remove \";\"", "")
      }
      append(diagnostic)
    }

    def syntaxErrorEmptyFunctionParentheses(range Range) {
      append(
        newError(range, "Functions without arguments do not use parentheses")
        .withFix(.EXTRA_DEF_PARENTHESES, range, "Remove parentheses", ""))
    }

    def syntaxErrorBadDeclarationInsideType(range Range) {
      append(newError(range, "Cannot use this declaration here"))
    }

    def syntaxErrorBadOperatorCustomization(range Range, kind TokenKind, why string) {
      append(newError(range, "The \(kind) operator is not customizable because \(why)"))
    }

    def syntaxErrorVariableDeclarationNeedsVar(range Range, name Range) {
      append(
        newError(range, "Declare variables using \"var\" and put the type after the variable name")
        .withFix(.NEED_VAR, Range.span(range, name), "Declare \"\(name)\" correctly", "var \(name) \(range)"))
    }

    def syntaxErrorXMLClosingTagMismatch(range Range, found string, expected string, openingRange Range) {
      append(
        newError(range, "Expected \"\(expected)\" but found \"\(found)\" in XML literal")
        .withNote(openingRange, "Attempted to match opening tag here"))
    }

    def syntaxErrorOptionalArgument(range Range) {
      append(newError(range, "Optional arguments aren't supported yet"))
    }
  }

  namespace Log {
    def _expectedCountText(singular string, expected int, found int) string {
      return "Expected \(PrettyPrint.plural(expected, singular)) but found \(PrettyPrint.plural(found, singular))"
    }

    def _formatArgumentTypes(types List<Type>) string {
      if types == null {
        return ""
      }
      var names List<string> = []
      for type in types {
        names.append(type.toString)
      }
      return " of type\(PrettyPrint.plural(types.count)) \(PrettyPrint.join(names, "and"))"
    }
  }

  class Log {
    def semanticWarningInliningFailed(range Range, name string) {
      append(newWarning(range, "Cannot inline function \"\(name)\""))
    }

    def semanticWarningIdenticalOperands(range Range, operator string) {
      append(newWarning(range, "Both sides of \"\(operator)\" are identical, is this a bug?"))
    }

    def semanticWarningSuspiciousAssignmentLocation(range Range) {
      append(newWarning(range, "Use of \"=\" here looks like a bug, did you mean to use \"==\"?"))
    }

    def semanticWarningShiftByZero(range Range) {
      append(newWarning(range, "Shifting an integer by zero doesn't do anything, is this a bug?"))
    }

    def semanticWarningUnusedExpression(range Range) {
      append(newWarning(range, "Unused expression"))
    }

    def semanticErrorXMLMissingAppend(range Range, type Type) {
      append(newError(range, "Implement a function called \"<>...</>\" on type \"\(type)\" to add support for child elements"))
    }

    def semanticErrorComparisonOperatorNotInt(range Range) {
      append(newError(range, "The comparison operator must have a return type of \"int\""))
    }

    def semanticErrorDuplicateSymbol(range Range, name string, previous Range) {
      append(
        newError(range, "\"\(name)\" is already declared")
        .withNote(previous, "The previous declaration is here"))
    }

    def semanticErrorShadowedSymbol(range Range, name string, previous Range) {
      append(
        newError(range, "\"\(name)\" shadows a previous declaration")
        .withNote(previous, "The previous declaration is here"))
    }

    def semanticErrorDuplicateTypeParameters(range Range, name string, previous Range) {
      append(
        newError(range, "\"\(name)\" already has type parameters")
        .withNote(previous, "Type parameters were previously declared here"))
    }

    def semanticErrorDuplicateBaseType(range Range, name string, previous Range) {
      append(
        newError(range, "\"\(name)\" already has a base type")
        .withNote(previous, "The previous base type is here"))
    }

    def semanticErrorCyclicDeclaration(range Range, name string) {
      append(newError(range, "Cyclic declaration of \"\(name)\""))
    }

    def semanticErrorUndeclaredSymbol(range Range, name string, correction string, correctionRange Range) {
      var diagnostic = newError(range, "\"\(name)\" is not declared" + (correction != null ? ", did you mean \"\(correction)\"?" : ""))
      if correction != null && correctionRange != null {
        diagnostic
          .withNote(correctionRange, "\"\(correction)\" is defined here")
          .withFix(.SYMBOL_TYPO, range, "Replace with \"\(correction)\"", correction)
      }
      append(diagnostic)
    }

    def semanticErrorUndeclaredSelfSymbol(range Range, name string) {
      append(
        newError(range, "\"\(name)\" is not declared (use \"self\" to refer to the object instance)")
        .withFix(.SELF_VS_THIS, range, "Replace \"\(name)\" with \"self\"", "self"))
    }

    def semanticErrorUnknownMemberSymbol(range Range, name string, type Type, correction string, correctionRange Range) {
      var diagnostic = newError(range, "\"\(name)\" is not declared on type \"\(type)\"" + (correction != null ? ", did you mean \"\(correction)\"?" : ""))
      if correction != null && correctionRange != null {
        diagnostic
          .withNote(correctionRange, "\"\(correction)\" is defined here")
          .withFix(.SYMBOL_TYPO, range, "Replace with \"\(correction)\"", correction)
      }
      append(diagnostic)
    }

    def semanticErrorVarMissingType(range Range, name string) {
      append(newError(range, "Unable to determine the type of \"\(name)\""))
    }

    def semanticErrorVarMissingValue(range Range, name string) {
      append(newError(range, "The implicitly typed variable \"\(name)\" must be initialized"))
    }

    def semanticErrorConstMissingValue(range Range, name string) {
      append(newError(range, "The constant \"\(name)\" must be initialized"))
    }

    def semanticErrorInvalidCall(range Range, type Type) {
      append(newError(range, "Cannot call value of type \"\(type)\""))
    }

    def semanticErrorCannotParameterize(range Range, type Type) {
      append(newError(range, "Cannot parameterize \"\(type)\"" + (
        type.isParameterized ? " because it is already parameterized" : " because it has no type parameters")))
    }

    def semanticErrorParameterCount(range Range, expected int, found int) {
      append(newError(range, _expectedCountText("type parameter", expected, found)))
    }

    def semanticErrorArgumentCount(range Range, expected int, found int, name string, function Range) {
      append(
        newError(range, _expectedCountText("argument", expected, found) + (name != null ? " when calling \"\(name)\"" : ""))
        .withNote(function, "The function declaration is here"))
    }

    def semanticErrorGetterRequiresWrap(range Range, name string, function Range) {
      append(
        newError(range, "Wrap calls to the function \"\(name)\" in parentheses to call the returned lambda")
        .withNote(function, "The function declaration is here"))
    }

    def semanticErrorGetterCalledTwice(range Range, name string, function Range) {
      var diagnostic =
        newError(range, "Cannot call the value returned from the function \"\(name)\" (this function was called automatically because it takes no arguments)")
        .withNote(function, "The function declaration is here")
      if range.toString == "()" {
        diagnostic.withFix(.EXTRA_CALL_PARENTHESES, range, "Remove the unnecessary \"()\"", "")
      }
      append(diagnostic)
    }

    def semanticErrorUseOfVoidFunction(range Range, name string, function Range) {
      append(
        newError(range, "The function \"\(name)\" does not return a value")
        .withNote(function, "The function declaration is here"))
    }

    def semanticErrorUseOfVoidLambda(range Range) {
      append(newError(range, "This call does not return a value"))
    }

    def semanticErrorBadImplicitVariableType(range Range, type Type) {
      append(newError(range, "Implicitly typed variables cannot be of type \"\(type)\""))
    }

    def semanticErrorNoDefaultValue(range Range, type Type) {
      append(newError(range, "Cannot construct a default value of type \"\(type)\""))
    }

    def semanticErrorMemberUnexpectedGlobal(range Range, name string) {
      append(newError(range, "Cannot access global member \"\(name)\" from an instance context"))
    }

    def semanticErrorMemberUnexpectedInstance(range Range, name string) {
      append(newError(range, "Cannot access instance member \"\(name)\" from a global context"))
    }

    def semanticErrorMemberUnexpectedTypeParameter(range Range, name string) {
      append(newError(range, "Cannot access type parameter \"\(name)\" here"))
    }

    def semanticErrorConstructorReturnType(range Range) {
      append(
        newError(range, "Constructors cannot have a return type")
        .withFix(.NEW_RETURN_TYPE, range?.rangeIncludingLeftWhitespace, "Remove the return type", ""))
    }

    def semanticErrorNoMatchingOverload(range Range, name string, count int, types List<Type>) {
      append(newError(range, "No overload of \"\(name)\" was found that takes \(PrettyPrint.plural(count, "argument"))\(_formatArgumentTypes(types))"))
    }

    def semanticErrorAmbiguousOverload(range Range, name string, count int, types List<Type>) {
      append(newError(range, "Multiple matching overloads of \"\(name)\" were found that can take \(PrettyPrint.plural(count, "argument"))\(_formatArgumentTypes(types))"))
    }

    def semanticErrorUnexpectedExpression(range Range, type Type) {
      append(newError(range, "Unexpected expression of type \"\(type)\""))
    }

    def semanticErrorUnexpectedType(range Range, type Type) {
      append(newError(range, "Unexpected type \"\(type)\""))
    }

    def semanticErrorIncompatibleTypes(range Range, from Type, to Type, isCastAllowed bool) {
      append(newError(range, "Cannot convert from type \"\(from)\" to type \"\(to)\"\(isCastAllowed ? " without a cast" : "")"))
    }

    def semanticErrorInvalidDefine(range Range, value string, type Type, name string) {
      append(newError(range, "Cannot convert \"\(value)\" to type \"\(type)\" for variable \"\(name)\""))
    }

    def semanticWarningExtraCast(range Range, from Type, to Type) {
      append(
        newWarning(range, "Unnecessary cast from type \"\(from)\" to type \"\(to)\"")
        .withFix(.EXTRA_CAST, range?.rangeIncludingLeftWhitespace, "Remove the cast", ""))
    }

    def semanticWarningExtraTypeCheck(range Range, from Type, to Type) {
      append(newWarning(range, "Unnecessary type check, type \"\(from)\" is always type \"\(to)\""))
    }

    def semanticWarningBadTypeCheck(range Range, type Type) {
      append(newError(range, "Cannot check against interface type \"\(type)\""))
    }

    def semanticErrorWrongArgumentCount(range Range, name string, count int) {
      append(newError(range, "Expected \"\(name)\" to take \(PrettyPrint.plural(count, "argument"))"))
    }

    def semanticErrorWrongArgumentCountRange(range Range, name string, values List<int>) {
      assert(!values.isEmpty)

      var first = values.first
      var count = values.count

      if count == 1 {
        semanticErrorWrongArgumentCount(range, name, first)
      }

      else {
        var counts List<string> = []
        var min = first
        var max = first
        var text string

        for value in values {
          min = Math.min(min, value)
          max = Math.max(max, value)
          counts.append(value.toString)
        }

        # Assuming values are unique, this means all values form a continuous range
        if max - min + 1 == count {
          if min == 0 {
            text = "Expected \"\(name)\" to take at most \(PrettyPrint.plural(max, "argument"))"
          } else {
            text = "Expected \"\(name)\" to take between \(min) and \(max) arguments"
          }
        }

        # Otherwise, the values are disjoint
        else {
          text = "Expected \"\(name)\" to take either \(PrettyPrint.join(counts, "or")) arguments"
        }

        append(newError(range, text))
      }
    }

    def semanticErrorExpectedList(range Range, name string, type Type) {
      append(newError(range, "Expected argument \"\(name)\" to be of type \"List<T>\" instead of type \"\(type)\""))
    }

    def semanticErrorUnexpectedReturnValue(range Range) {
      append(newError(range, "Cannot return a value inside a function without a return type"))
    }

    def semanticErrorBadReturnType(range Range, type Type) {
      append(newError(range, "Cannot create a function with a return type of \"\(type)\""))
    }

    def semanticErrorVoidReturnType(range Range) {
      append(
        newError(range, "There is no explicit \"void\" return type (to indicate that there's nothing to return, just don't put a return type)")
        .withFix(.VOID_RETURN, range?.rangeIncludingLeftWhitespace, "Remove \"void\"", ""))
    }

    def semanticErrorExpectedReturnValue(range Range, type Type) {
      append(newError(range, "Must return a value of type \"\(type)\""))
    }

    def semanticErrorMissingReturn(range Range, name string, type Type) {
      append(newError(range, "All control paths for \"\(name)\" must return a value of type \"\(type)\""))
    }

    def semanticErrorBadStorage(range Range) {
      append(newError(range, "Cannot store to this location"))
    }

    def semanticErrorStorageToConstSymbol(range Range, name string) {
      append(newError(range, "Cannot store to constant symbol \"\(name)\""))
    }

    def semanticErrorAccessViolation(range Range, name string) {
      append(newError(range, "Cannot access protected symbol \"\(name)\" here"))
    }

    def semanticWarningDeprecatedUsage(range Range, name string) {
      append(newWarning(range, "Use of deprecated symbol \"\(name)\""))
    }

    def semanticErrorUnparameterizedType(range Range, type Type) {
      append(newError(range, "Cannot use unparameterized type \"\(type)\" here"))
    }

    def semanticErrorParameterizedType(range Range, type Type) {
      append(newError(range, "Cannot use parameterized type \"\(type)\" here"))
    }

    def semanticErrorNoCommonType(range Range, left Type, right Type) {
      append(newError(range, "No common type for \"\(left)\" and \"\(right)\""))
    }

    def semanticErrorInvalidAnnotation(range Range, annotation string, name string) {
      append(newError(range, "Cannot use the annotation \"\(annotation)\" on \"\(name)\""))
    }

    def semanticWarningDuplicateAnnotation(range Range, annotation string, name string) {
      append(newWarning(range, "Duplicate annotation \"\(annotation)\" on \"\(name)\""))
    }

    def semanticWarningRedundantAnnotation(range Range, annotation string, name string, parent string) {
      append(newWarning(range, "Redundant annotation \"\(annotation)\" on \"\(name)\" is already inherited from type \"\(parent)\""))
    }

    def semanticErrorBadForValue(range Range, type Type) {
      append(newError(range, "Cannot iterate over type \"\(type)\""))
    }

    def semanticWarningEmptyRange(range Range) {
      append(newWarning(range, "This range is empty"))
    }

    def semanticErrorMissingDotContext(range Range, name string) {
      append(newError(range, "Cannot access \"\(name)\" without type context"))
    }

    def semanticErrorInitializerTypeInferenceFailed(range Range) {
      append(newError(range, "Cannot infer a type for this literal"))
    }

    def semanticErrorInitializerRecursiveExpansion(range Range, newRange Range) {
      append(
        newError(range, "Attempting to resolve this literal led to recursive expansion")
        .withNote(newRange, "The constructor that was called recursively is here"))
    }

    def semanticErrorXMLCannotConstruct(range Range, type Type) {
      append(newError(range, "Cannot construct type \"\(type)\""))
    }

    def semanticErrorDuplicateOverload(range Range, name string, previous Range) {
      append(
        newError(range, "Duplicate overloaded function \"\(name)\"")
        .withNote(previous, "The previous declaration is here"))
    }

    def semanticErrorInvalidExtends(range Range, type Type) {
      append(newError(range, "Cannot extend type \"\(type)\""))
    }

    def semanticErrorInvalidImplements(range Range, type Type) {
      append(newError(range, "Cannot implement type \"\(type)\""))
    }

    def semanticErrorDuplicateImplements(range Range, type Type, previous Range) {
      append(
        newError(range, "Duplicate implemented type \"\(type)\"")
        .withNote(previous, "The first occurrence is here"))
    }

    def semanticErrorBadInterfaceImplementation(range Range, classType Type, interfaceType Type, name string, reason Range) {
      append(
        newError(range, "Type \"\(classType)\" is missing an implementation of function \"\(name)\" from interface \"\(interfaceType)\"")
        .withNote(reason, "The function declaration is here"))
    }

    def semanticErrorBadInterfaceImplementationReturnType(range Range, name string, found Type, expected Type, interfaceType Type, reason Range) {
      append(
        newError(range, found != null && expected != null
          ? "Function \"\(name)\" has unexpected return type \"\(found)\", expected return type \"\(expected)\" " +
            "to match the function with the same name and argument types from interface \"\(interfaceType)\""
          : "Expected the return type of function \"\(name)\" to match the function with the same name and argument types from interface \"\(interfaceType)\"")
        .withNote(reason, "The function declaration is here"))
    }

    def semanticErrorBadOverride(range Range, name string, base Type, overridden Range) {
      append(
        newError(range, "\"\(name)\" overrides another declaration with the same name in base type \"\(base)\"")
        .withNote(overridden, "The overridden declaration is here"))
    }

    def semanticErrorBadOverrideReturnType(range Range, name string, base Type, overridden Range) {
      append(
        newError(range, "\"\(name)\" overrides another function with the same name and argument types but a different return type in base type \"\(base)\"")
        .withNote(overridden, "The overridden function is here"))
    }

    def semanticErrorModifierMissingOverride(range Range, name string, overridden Range) {
      append(
        newError(range, "\"\(name)\" overrides another symbol with the same name but is declared using \"def\" instead of \"over\"")
        .withNote(overridden, "The overridden declaration is here"))
    }

    def semanticErrorModifierUnusedOverride(range Range, name string) {
      append(newError(range, "\"\(name)\" is declared using \"over\" instead of \"def\" but does not override anything"))
    }

    def semanticErrorBadSuper(range Range) {
      append(newError(range, "Cannot use \"super\" here"))
    }

    def semanticErrorBadJump(range Range, name string) {
      append(newError(range, "Cannot use \"\(name)\" outside a loop"))
    }

    def semanticErrorMustCallFunction(range Range, name string, lower int, upper int) {
      append(newError(range, lower == upper
        ? "The function \"\(name)\" takes \(PrettyPrint.plural(lower, "argument")) and must be called"
        : "The function \"\(name)\" takes between \(lower) and \(upper) arguments and must be called"))
    }

    def semanticErrorDuplicateEntryPoint(range Range, previous Range) {
      append(
        newError(range, "Multiple entry points are declared")
        .withNote(previous, "The first entry point is here"))
    }

    def semanticErrorInvalidEntryPointArguments(range Range, name string) {
      append(newError(range, "Entry point \"\(name)\" must take either no arguments or one argument of type \"List<string>\""))
    }

    def semanticErrorInvalidEntryPointReturnType(range Range, name string) {
      append(newError(range, "Entry point \"\(name)\" must return either nothing or a value of type \"int\""))
    }

    def semanticErrorInvalidDefine(range Range, name string) {
      append(newError(range, "Could not find a variable named \"\(name)\" to override"))
    }

    def semanticErrorExpectedConstant(range Range) {
      append(newError(range, "This value must be a compile-time constant"))
    }

    def semanticWarningUnreadLocalVariable(range Range, name string) {
      append(newWarning(range, "Local variable \"\(name)\" is never read"))
    }

    def semanticErrorAbstractNew(range Range, type Type, reason Range, name string) {
      append(
        newError(range, "Cannot construct abstract type \"\(type)\"")
        .withNote(reason, "The type \"\(type)\" is abstract due to member \"\(name)\""))
    }

    def semanticErrorUnimplementedFunction(range Range, name string) {
      append(newError(range, "Non-imported function \"\(name)\" is missing an implementation (use the \"@import\" annotation if it's implemented externally)"))
    }

    def semanticErrorDefaultCaseNotLast(range Range) {
      append(newError(range, "The default case in a switch statement must come last"))
    }

    def semanticErrorForLoopDifferentType(range Range, name string, found Type, expected Type) {
      append(newError(range, "Expected loop variable \"\(name)\" to be of type \"\(expected)\" instead of type \"\(found)\""))
    }

    def semanticErrorDuplicateCase(range Range, previous Range) {
      append(
        newError(range, "Duplicate case value")
        .withNote(previous, "The first occurrence is here"))
    }

    def semanticErrorMissingWrappedType(range Range, name string) {
      append(newError(range, "Missing base type for wrapped type \"\(name)\""))
    }

    def semanticErrorDuplicateRename(range Range, name string, optionA string, optionB string) {
      append(newError(range, "Cannot rename \"\(name)\" to both \"\(optionA)\" and \"\(optionB)\""))
    }

    def semanticErrorMissingSuper(range Range) {
      append(newError(range, "Constructors for derived types must start with a call to \"super\""))
    }

    def semanticErrorTooManyFlags(range Range, name string) {
      append(newError(range, "The type \"\(name)\" cannot have more than 32 flags"))
    }
  }

  class Log {
    def semanticErrorMixinNeedsGlobalizeFunctions(range Range) {
      append(newError(range, "Mixins require --globalize-functions or --release to work properly"))
    }
  }
}
