namespace Skew {
  enum PassKind {
    RESOLVING
  }

  class ResolvingPass : Pass {
    over kind PassKind {
      return .RESOLVING
    }

    over run(context PassContext) {
      context.cache.loadGlobals(context.log, context.global)
      Resolving.Resolver.new(context.global, context.options, context.options.defines.clone, context.cache, context.log).resolve

      # The tree isn't fully resolved for speed reasons if code completion is requested
      if context.options.completionContext == null {
        context.isResolvePassComplete = true
      }
    }
  }
}

namespace Skew.Resolving {
  enum ConversionKind {
    IMPLICIT
    EXPLICIT
  }

  enum SymbolStatistic {
    READ
    WRITE
  }

  class LocalVariableStatistics {
    var symbol VariableSymbol
    var readCount = 0
    var writeCount = 0
  }

  namespace LocalVariableStatistics {
    const SORT_BY_ID = (a LocalVariableStatistics, b LocalVariableStatistics) => a.symbol.id <=> b.symbol.id
  }

  class Resolver {
    const _global ObjectSymbol
    const _options CompilerOptions
    const _defines StringMap<Define>
    const _cache TypeCache
    const _log Log
    const _foreachLoops List<Node> = []
    const _localVariableStatistics IntMap<LocalVariableStatistics> = {}
    const _controlFlow = ControlFlowAnalyzer.new
    const _generatedGlobalVariables List<VariableSymbol> = []
    var _constantFolder Folding.ConstantFolder = null
    var _isMergingGuards = true

    def resolve {
      _constantFolder = Folding.ConstantFolder.new(_cache, _options, symbol => _initializeSymbol(symbol))
      _initializeGlobals
      _iterativelyMergeGuards
      _resolveGlobal
      _removeObsoleteFunctions(_global)
      _global.variables.insert(0, _generatedGlobalVariables)
    }

    # Put the guts of the function inside another function because V8 doesn't
    # optimize functions with try-catch statements
    def _initializeSymbolSwitch(symbol Symbol) {
      switch symbol.kind {
        case .OBJECT_CLASS, .OBJECT_ENUM, .OBJECT_FLAGS, .OBJECT_GLOBAL, .OBJECT_INTERFACE, .OBJECT_NAMESPACE, .OBJECT_WRAPPED {
          _initializeObject(symbol.asObjectSymbol)
        }

        case .FUNCTION_ANNOTATION, .FUNCTION_CONSTRUCTOR, .FUNCTION_GLOBAL, .FUNCTION_INSTANCE, .FUNCTION_LOCAL {
          _initializeFunction(symbol.asFunctionSymbol)
        }

        case .VARIABLE_ARGUMENT, .VARIABLE_ENUM_OR_FLAGS, .VARIABLE_GLOBAL, .VARIABLE_INSTANCE, .VARIABLE_LOCAL {
          _initializeVariable(symbol.asVariableSymbol)
        }

        case .PARAMETER_FUNCTION, .PARAMETER_OBJECT {
          _initializeParameter(symbol.asParameterSymbol)
        }

        case .OVERLOADED_ANNOTATION, .OVERLOADED_GLOBAL, .OVERLOADED_INSTANCE {
          _initializeOverloadedFunction(symbol.asOverloadedFunctionSymbol)
        }

        default {
          assert(false)
        }
      }
    }

    def _initializeSymbol(symbol Symbol) {
      # The scope should have been set by the merging pass (or by this pass for local variables)
      assert(symbol.scope != null)

      # Only initialize the symbol once
      if symbol.state == .UNINITIALIZED {
        symbol.state = .INITIALIZING

        try {
          _initializeSymbolSwitch(symbol)
        }

        # If guard merging failed, reset the type so we'll try again next time
        catch failure GuardMergingFailure {
          symbol.state = .UNINITIALIZED
          throw failure
        }

        assert(symbol.resolvedType != null)
        symbol.state = .INITIALIZED

        if symbol.kind.isFunction {
          var function = symbol.asFunctionSymbol
          var overloaded = function.overloaded

          # After initializing a function symbol, ensure the entire overload set is initialized
          if overloaded != null && overloaded.state == .UNINITIALIZED {
            _initializeSymbol(overloaded)
          }
        }
      }

      # Detect cyclic symbol references such as "foo foo;"
      else if symbol.state == .INITIALIZING {
        _log.semanticErrorCyclicDeclaration(symbol.range, symbol.name)
        symbol.resolvedType = .DYNAMIC
      }
    }

    def _validateEntryPoint(symbol FunctionSymbol) {
      # Detect duplicate entry points
      if _cache.entryPointSymbol != null {
        _log.semanticErrorDuplicateEntryPoint(symbol.range, _cache.entryPointSymbol.range)
        return
      }

      _cache.entryPointSymbol = symbol

      # Only recognize a few entry point types
      var type = symbol.resolvedType
      if type != .DYNAMIC {
        var argumentTypes = type.argumentTypes

        # The argument list must be empty or one argument of type "List<string>"
        if argumentTypes.count > 1 || argumentTypes.count == 1 && argumentTypes.first != _cache.createListType(_cache.stringType) {
          _log.semanticErrorInvalidEntryPointArguments(Range.span(symbol.arguments.first.range, symbol.arguments.last.type.range), symbol.name)
        }

        # The return type must be nothing or "int"
        else if type.returnType != null && type.returnType != _cache.intType {
          _log.semanticErrorInvalidEntryPointReturnType(symbol.returnType.range, symbol.name)
        }
      }
    }

    def _resolveDefines(symbol VariableSymbol) {
      var key = symbol.fullName
      var define = _defines.get(key, null)

      if define == null {
        return
      }

      # Remove the define so we can tell what defines weren't used later on
      _defines.remove(key)

      var type = symbol.resolvedType
      var range = define.value
      var value = range.toString
      var node Node = null

      # Special-case booleans
      if type == _cache.boolType {
        if value == "true" || value == "false" {
          node = Node.createBool(value == "true")
        }
      }

      # Special-case doubles
      else if type == _cache.doubleType {
        var number = parseDoubleLiteral(value)
        if !number.isNaN {
          node = Node.createDouble(number)
        }
      }

      # Special-case strings
      else if type == _cache.stringType {
        node = Node.createString(value)
      }

      # Special-case enums
      else if type.isEnumOrFlags {
        node = Node.createDot(null, value)
      }

      # Integers can also apply to doubles
      if node == null && _cache.isNumeric(type) {
        var box = Parsing.parseIntLiteral(_log, range)
        if box != null {
          node = Node.createInt(box.value)
        }
      }

      # Stop if anything failed above
      if node == null {
        _log.semanticErrorInvalidDefine(range, value, type, key)
        return
      }

      _resolveAsParameterizedExpressionWithConversion(node.withRange(range), _global.scope, type)
      symbol.value = node
    }

    def _resolveAnnotations(symbol Symbol) {
      var parent = symbol.parent
      var annotations = symbol.annotations

      # The import/export annotations are inherited, except import isn't inherited for implemented functions
      if parent != null {
        symbol.flags |= parent.flags & (symbol.kind.isFunction && symbol.asFunctionSymbol.block != null ? .IS_EXPORTED : .IS_IMPORTED | .IS_EXPORTED)
        # The keepname annotation is inherited too
        symbol.flags |= parent.flags & .SHOULD_KEEPNAMES
      }

      # Resolve annotations on this symbol after annotation inheritance. Don't
      # use removeIf() since this annotation list may be shared elsewhere.
      if annotations != null {
        symbol.annotations = annotations.filter(annotation => _resolveAnnotation(annotation, symbol))
      }

      # Protected access used to be an annotation. It's now indicated with just
      # a leading underscore.
      if symbol.name.startsWith("_") && !symbol.kind.isLocal {
        symbol.flags |= .IS_PROTECTED
      }
    }

    def _resolveParameters(parameters List<ParameterSymbol>) {
      if parameters != null {
        for parameter in parameters {
          _resolveParameter(parameter)
        }
      }
    }

    def _initializeParameter(symbol ParameterSymbol) {
      symbol.resolvedType ?= Type.new(.SYMBOL, symbol)
      _resolveAnnotations(symbol)
    }

    def _resolveParameter(symbol ParameterSymbol) {
      _initializeSymbol(symbol)
    }

    def _initializeObject(symbol ObjectSymbol) {
      var kind = symbol.kind
      var extends = symbol.extends
      var implements = symbol.implements
      var mixins = symbol.mixins

      symbol.resolvedType ?= Type.new(.SYMBOL, symbol)
      _resolveParameters(symbol.parameters)

      # Resolve the base type (only for classes and wrapped types)
      if extends != null {
        _resolveAsParameterizedType(extends, symbol.scope)
        var baseType = extends.resolvedType

        if kind == .OBJECT_WRAPPED {
          symbol.wrappedType = baseType
          symbol.resolvedType.environment = baseType.environment # Don't lose the type parameters from the base type
        }

        else if kind != .OBJECT_CLASS || (baseType != .DYNAMIC && (!baseType.isClass || baseType.symbol.isValueType)) {
          _log.semanticErrorInvalidExtends(extends.range, baseType)
        }

        else if baseType != .DYNAMIC {
          symbol.baseType = baseType
          symbol.baseClass = baseType.symbol.asObjectSymbol
          symbol.resolvedType.environment = baseType.environment # Don't lose the type parameters from the base type

          # Copy members from the base type
          var functions List<FunctionSymbol> = []
          var members = symbol.baseClass.members.values
          members.sort(Symbol.SORT_BY_ID) # Sort so the order is deterministic
          _mergeFunctionsIntoMembers(symbol, members, baseType, functions)

          Merging.mergeFunctions(_log, symbol, functions, .INTO_DERIVED_CLASS)
        }
      }

      # Wrapped types without something to wrap don't make sense
      else if kind == .OBJECT_WRAPPED {
        _log.semanticErrorMissingWrappedType(symbol.range, symbol.fullName)

        # Make sure to fill out the wrapped type anyway so code that tries to
        # access it doesn't crash. The dynamic type should ignore further errors.
        symbol.wrappedType = .DYNAMIC
      }

      # Add all mixins to the class
      if mixins != null {
        if !_options.globalizeAllFunctions {
          _log.semanticErrorMixinNeedsGlobalizeFunctions(mixins[0].range)
        }

        for type in mixins {
          _resolveAsParameterizedType(type, symbol.scope)
          var mixinType = type.resolvedType
          # Ignore the dynamic type, which will be from errors and dynamic expressions used for exports
          if mixinType == .DYNAMIC {
            continue
          }

          if kind != .OBJECT_WRAPPED && kind != .OBJECT_CLASS && (mixinType == .DYNAMIC || (mixinType.isClass && !mixinType.symbol.isValueType)) {
            _log.semanticErrorInvalidExtends(type.range, mixinType)
          }

          # Copy members from the mixin type
          var functions List<FunctionSymbol> = []
          var members = mixinType.symbol.asObjectSymbol.members.values
          members.sort(Symbol.SORT_BY_ID) # Sort so the order is deterministic
          _mergeFunctionsIntoMembers(symbol, members, mixinType, functions)

          Merging.mergeFunctions(_log, symbol, functions, .INTO_DERIVED_CLASS)
        }
      }

      # Resolve the base interface types
      if implements != null {
        symbol.interfaceTypes = []
        for i in 0..implements.count {
          var type = implements[i]
          _resolveAsParameterizedType(type, symbol.scope)

          # Ignore the dynamic type, which will be from errors and dynamic expressions used for exports
          var interfaceType = type.resolvedType
          if interfaceType == .DYNAMIC {
            continue
          }

          # Only classes can derive from interfaces
          if kind != .OBJECT_CLASS || !interfaceType.isInterface {
            _log.semanticErrorInvalidImplements(type.range, interfaceType)
            continue
          }

          # An interface can only be implemented once
          for j in 0..i {
            var other = implements[j]
            if other.resolvedType == interfaceType {
              _log.semanticErrorDuplicateImplements(type.range, interfaceType, other.range)
              break
            }
          }

          symbol.interfaceTypes.append(interfaceType)
        }
      }

      # Assign values for all enums and flags before they are initialized
      if kind.isEnumOrFlags {
        var nextValue = 0
        for variable in symbol.variables {
          if variable.kind == .VARIABLE_ENUM_OR_FLAGS {
            if nextValue >= 32 && kind == .OBJECT_FLAGS {
              _log.semanticErrorTooManyFlags(variable.range, symbol.name)
            }
            variable.value = Node.createInt(kind == .OBJECT_FLAGS ? 1 << nextValue : nextValue).withType(symbol.resolvedType).withRange(variable.range)
            nextValue++
          }
        }
        symbol.flags |= .IS_VALUE_TYPE
      }

      _resolveAnnotations(symbol)

      # Create a default constructor if one doesn't exist
      var constructor = symbol.members.get("new", null)
      if kind == .OBJECT_CLASS && !symbol.isImported && constructor == null {
        var baseConstructor = symbol.baseClass?.members.get("new", null)

        # Unwrap the overload group if present
        if baseConstructor != null && baseConstructor.kind == .OVERLOADED_GLOBAL {
          var overloaded = baseConstructor.asOverloadedFunctionSymbol
          for overload in overloaded.symbols {
            if overload.kind == .FUNCTION_CONSTRUCTOR {
              if baseConstructor.kind == .FUNCTION_CONSTRUCTOR {
                baseConstructor = null # Signal that there isn't a single base constructor
                break
              }
              baseConstructor = overload
            }
          }
        }

        # A default constructor can only be created if the base class has a single constructor
        if symbol.baseClass == null || baseConstructor != null && baseConstructor.kind == .FUNCTION_CONSTRUCTOR {
          var generated = FunctionSymbol.new(.FUNCTION_CONSTRUCTOR, "new")
          generated.scope = FunctionScope.new(symbol.scope, generated)
          generated.flags |= .IS_AUTOMATICALLY_GENERATED
          generated.parent = symbol
          generated.range = symbol.range
          generated.overridden = baseConstructor?.asFunctionSymbol
          symbol.functions.append(generated)
          symbol.members[generated.name] = generated
        }
      }

      # Create a default toString if one doesn't exist
      if kind == .OBJECT_ENUM && !symbol.isImported && !("toString" in symbol.members) {
        var generated = FunctionSymbol.new(.FUNCTION_INSTANCE, "toString")
        generated.scope = FunctionScope.new(symbol.scope, generated)
        generated.flags |= .IS_AUTOMATICALLY_GENERATED | .IS_INLINING_FORCED
        _options.isAlwaysInlinePresent = true
        generated.parent = symbol
        generated.range = symbol.range
        symbol.functions.append(generated)
        symbol.members[generated.name] = generated
      }
    }

    def _mergeFunctionsIntoMembers(symbol ObjectSymbol, members List<Symbol>, baseType Type, functions List<FunctionSymbol>) {
      for member in members {
        var memberKind = member.kind

        # Separate out functions
        if memberKind.isFunction {
          if memberKind != .FUNCTION_CONSTRUCTOR {
            functions.append(member.asFunctionSymbol)
          }
        }

        # Include overloaded functions individually
        else if memberKind.isOverloadedFunction {
          for function in member.asOverloadedFunctionSymbol.symbols {
            if function.kind != .FUNCTION_CONSTRUCTOR {
              functions.append(function)
            }
          }
        }

        # Other kinds
        else if !memberKind.isParameter {
          var other = symbol.members.get(member.name, null)
          if other != null {
            _log.semanticErrorBadOverride(other.range, other.name, baseType, member.range)
          } else {
            symbol.members[member.name] = member
          }
        }
      }
    }

    def _checkInterfacesAndAbstractStatus(object ObjectSymbol, function FunctionSymbol) {
      assert(function.kind == .FUNCTION_INSTANCE)
      assert(function.state == .INITIALIZED)

      if !object.isAbstract && !function.isImported && !function.isObsolete && function.block == null {
        object.isAbstractBecauseOf = function
      }
    }

    def _checkInterfacesAndAbstractStatus(symbol ObjectSymbol) {
      assert(symbol.state == .INITIALIZED)

      if symbol.hasCheckedInterfacesAndAbstractStatus || symbol.kind != .OBJECT_CLASS {
        return
      }

      symbol.hasCheckedInterfacesAndAbstractStatus = true

      # Check to see if this class is abstract (has unimplemented members)
      var members = symbol.members.values
      members.sort(Symbol.SORT_BY_ID) # Sort so the order is deterministic
      for member in members {
        if member.kind == .OVERLOADED_INSTANCE {
          _initializeSymbol(member)
          for function in member.asOverloadedFunctionSymbol.symbols {
            _checkInterfacesAndAbstractStatus(symbol, function)
          }
        } else if member.kind == .FUNCTION_INSTANCE {
          _initializeSymbol(member)
          _checkInterfacesAndAbstractStatus(symbol, member.asFunctionSymbol)
        }
        if symbol.isAbstract {
          break
        }
      }

      # Check interfaces for missing implementations
      if symbol.interfaceTypes != null {
        for interfaceType in symbol.interfaceTypes {
          for function in interfaceType.symbol.asObjectSymbol.functions {
            if function.kind != .FUNCTION_INSTANCE || function.block != null {
              continue
            }
            _initializeSymbol(function)

            var member = symbol.members.get(function.name, null)
            var match FunctionSymbol = null
            var equivalence = TypeCache.Equivalence.NOT_EQUIVALENT

            # Search for a matching function
            if member != null {
              _initializeSymbol(member)
              if member.kind == .OVERLOADED_INSTANCE {
                for other in member.asOverloadedFunctionSymbol.symbols {
                  equivalence = _cache.areFunctionSymbolsEquivalent(function, interfaceType.environment, other, null)
                  if equivalence != .NOT_EQUIVALENT {
                    match = other
                    break
                  }
                }
              } else if member.kind == .FUNCTION_INSTANCE {
                equivalence = _cache.areFunctionSymbolsEquivalent(function, interfaceType.environment, member.asFunctionSymbol, null)
                if equivalence != .NOT_EQUIVALENT {
                  match = member.asFunctionSymbol
                }
              }
            }

            # Validate use of the interface
            if match == null {
              _log.semanticErrorBadInterfaceImplementation(symbol.range, symbol.resolvedType, interfaceType, function.name, function.range)
            } else if equivalence == .EQUIVALENT_EXCEPT_RETURN_TYPE {
              var returnType = function.resolvedType.returnType
              if returnType != null {
                returnType = _cache.substitute(returnType, interfaceType.environment)
              }
              _log.semanticErrorBadInterfaceImplementationReturnType(match.range, match.name, match.resolvedType.returnType,
                _cache.substituteFunctionParameters(returnType, match, function), interfaceType, function.range)
            } else {
              function.implementations ?= []
              function.implementations.append(match)
            }
          }
        }
      }
    }

    def _initializeGlobals {
      _initializeSymbol(_cache.boolType.symbol)
      _initializeSymbol(_cache.doubleType.symbol)
      _initializeSymbol(_cache.intMapType.symbol)
      _initializeSymbol(_cache.intType.symbol)
      _initializeSymbol(_cache.listType.symbol)
      _initializeSymbol(_cache.stringMapType.symbol)
      _initializeSymbol(_cache.stringType.symbol)
    }

    def _resolveGlobal {
      _resolveObject(_global)
      _scanLocalVariables
      _convertForeachLoops
      _discardUnusedDefines
    }

    # An obsolete function is one without an implementation that was dropped in
    # favor of one with an implementation:
    #
    #   namespace Foo {
    #     def foo {}
    #
    #     # This will be marked as obsolete
    #     def foo
    #   }
    #
    def _removeObsoleteFunctions(symbol ObjectSymbol) {
      for object in symbol.objects {
        _removeObsoleteFunctions(object)
      }
      symbol.functions.removeIf(function => function.isObsolete)
    }

    def _iterativelyMergeGuards {
      var guards List<Guard>

      # Iterate until a fixed point is reached
      while true {
        guards = []
        _scanForGuards(_global, guards)
        if guards.isEmpty {
          break
        }

        # Each iteration must remove at least one guard to continue
        if !_processGuards(guards) {
          break
        }
      }

      _isMergingGuards = false

      # All remaining guards are errors
      for guard in guards {
        var count = _log.errorCount
        _resolveAsParameterizedExpressionWithConversion(guard.test, guard.parent.scope, _cache.boolType)
        if _log.errorCount == count {
          _log.semanticErrorExpectedConstant(guard.test.range)
        }
      }
    }

    def _scanForGuards(symbol ObjectSymbol, guards List<Guard>) {
      if symbol.guards != null {
        guards.append(symbol.guards)
      }

      for object in symbol.objects {
        _scanForGuards(object, guards)
      }
    }

    if TARGET == .CSHARP {
      class GuardMergingFailure : dynamic.System.Exception {
      }
    }

    else {
      class GuardMergingFailure {
      }
    }

    def _reportGuardMergingFailure(node Node) {
      if _isMergingGuards {
        throw GuardMergingFailure.new
      }
    }

    def _attemptToResolveGuardConstant(node Node, scope Scope) bool {
      assert(scope != null)
      try {
        _resolveAsParameterizedExpressionWithConversion(node, scope, _cache.boolType)
        _constantFolder.foldConstants(node)
        return true
      } catch failure GuardMergingFailure {
      }
      return false
    }

    def _processGuards(guards List<Guard>) bool {
      var wasGuardRemoved = false

      for guard in guards {
        var test = guard.test
        var parent = guard.parent

        # If it's not a constant, we'll just try again in the next iteration
        if !_attemptToResolveGuardConstant(test, parent.scope) {
          continue
        }

        if test.isBool {
          parent.guards.removeOne(guard)
          wasGuardRemoved = true

          if test.isTrue {
            _mergeGuardIntoObject(guard, parent)
          } else {
            var elseGuard = guard.elseGuard
            if elseGuard != null {
              if elseGuard.test != null {
                elseGuard.parent = parent
                parent.guards.append(elseGuard)
              } else {
                _mergeGuardIntoObject(elseGuard, parent)
              }
            }
          }
        }
      }

      return wasGuardRemoved
    }

    def _mergeGuardIntoObject(guard Guard, object ObjectSymbol) {
      var symbol = guard.contents
      Merging.mergeObjects(_log, object, symbol.objects)
      Merging.mergeFunctions(_log, object, symbol.functions, .NORMAL)
      Merging.mergeVariables(_log, object, symbol.variables)
      object.objects.append(symbol.objects)
      object.functions.append(symbol.functions)
      object.variables.append(symbol.variables)

      # Handle nested guard clauses like this:
      #
      #   if true {
      #     if true {
      #       var foo = 0
      #     }
      #   }
      #
      if symbol.guards != null {
        for nested in symbol.guards {
          object.guards.append(nested)
          for g = nested; g != null; g = g.elseGuard {
            g.parent = object
            g.contents.parent = object
          }
        }
      }
    }

    # Foreach loops are converted to for loops after everything is resolved
    # because that process needs to generate symbol names and it's much easier
    # to generate non-conflicting symbol names after all local variables have
    # been defined.
    def _convertForeachLoops {
      for node in _foreachLoops {
        var symbol = node.symbol.asVariableSymbol
        var scope = symbol.scope.findEnclosingFunctionOrLambda # Generate names at the function level to avoid conflicts with local scopes
        var value = node.foreachValue
        var block = node.foreachBlock

        # Handle "for i in 0..10"
        if value.kind == .PAIR {
          var first = value.firstValue
          var second = value.secondValue
          symbol.flags &= ~.IS_CONST
          symbol.value = first.remove
          var setup = Node.createVariables.appendChild(Node.createVariable(symbol))
          var symbolName = Node.createSymbolReference(symbol)
          var update = Node.createUnary(.PREFIX_INCREMENT, symbolName)
          var test Node

          # Special-case constant iteration limits to generate simpler code
          if second.kind == .CONSTANT || second.kind == .NAME && second.symbol != null && second.symbol.isConst {
            test = Node.createBinary(.LESS_THAN, symbolName.clone, second.remove)
          }

          # Otherwise, save the iteration limit in case it changes during iteration
          else {
            var count = VariableSymbol.new(.VARIABLE_LOCAL, scope.generateName("count"))
            count.initializeWithType(_cache.intType)
            count.value = second.remove
            setup.appendChild(Node.createVariable(count))
            test = Node.createBinary(.LESS_THAN, symbolName.clone, Node.createSymbolReference(count))
          }

          # Use a C-style for loop to implement this foreach loop
          node.become(Node.createFor(setup, test, update, block.remove).withComments(node.comments).withRange(node.range))

          # Make sure the new expressions are resolved
          _resolveNode(test, symbol.scope, null)
          _resolveNode(update, symbol.scope, null)
        }

        else if _cache.isList(value.resolvedType) && !_options.target.supportsListForeach {
          # Create the index variable
          var index = VariableSymbol.new(.VARIABLE_LOCAL, scope.generateName("i"))
          index.initializeWithType(_cache.intType)
          index.value = _cache.createInt(0)
          var setup = Node.createVariables.appendChild(Node.createVariable(index))
          var indexName = Node.createSymbolReference(index)

          # Create the list variable
          var list VariableSymbol = null
          if value.kind == .NAME && value.symbol != null && value.symbol.kind.isVariable && value.symbol.isConst {
            list = value.symbol.asVariableSymbol
          } else {
            list = VariableSymbol.new(.VARIABLE_LOCAL, scope.generateName("list"))
            list.initializeWithType(value.resolvedType)
            list.value = value.remove
            setup.appendChild(Node.createVariable(list))
          }
          var listName = Node.createSymbolReference(list)

          # Create the count variable
          var count = VariableSymbol.new(.VARIABLE_LOCAL, scope.generateName("count"))
          count.initializeWithType(_cache.intType)
          count.value = Node.createDot(listName, "count")
          setup.appendChild(Node.createVariable(count))
          var countName = Node.createSymbolReference(count)

          # Move the loop variable into the loop body
          symbol.value = Node.createIndex(listName.clone, indexName)
          block.prependChild(Node.createVariables.appendChild(Node.createVariable(symbol)))

          # Use a C-style for loop to implement this foreach loop
          var test = Node.createBinary(.LESS_THAN, indexName.clone, countName)
          var update = Node.createUnary(.PREFIX_INCREMENT, indexName.clone)
          node.become(Node.createFor(setup, test, update, block.remove).withComments(node.comments).withRange(node.range))

          # Make sure the new expressions are resolved
          _resolveNode(symbol.value, symbol.scope, null)
          _resolveNode(count.value, symbol.scope, null)
          _resolveNode(test, symbol.scope, null)
          _resolveNode(update, symbol.scope, null)
        }
      }
    }

    def _scanLocalVariables {
      var values = _localVariableStatistics.values
      values.sort(LocalVariableStatistics.SORT_BY_ID) # Sort so the order is deterministic
      for info in values {
        var symbol = info.symbol

        # Variables that are never re-assigned can safely be considered constants for constant folding
        if info.writeCount == 0 && _options.foldAllConstants {
          symbol.flags |= .IS_CONST
        }

        # Unused local variables can safely be removed, but don't warn about "for i in 0..10 {}"
        if info.readCount == 0 && !symbol.isLoopVariable && symbol.kind == .VARIABLE_LOCAL {
          _log.semanticWarningUnreadLocalVariable(symbol.range, symbol.name)
        }

        # Rename local variables that conflict
        var scope = symbol.scope
        while scope.kind == .LOCAL {
          scope = scope.parent
        }
        if scope.used != null && scope.used.get(symbol.name, null) != symbol {
          symbol.name = scope.generateName(symbol.name)
        }
      }
    }

    def _discardUnusedDefines {
      var keys = _defines.keys
      keys.sort((a, b) => a <=> b) # Sort so the order is deterministic
      for key in keys {
        _log.semanticErrorInvalidDefine(_defines[key].name, key)
      }
    }

    def _resolveObject(symbol ObjectSymbol) {
      _initializeSymbol(symbol)

      for object in symbol.objects {
        _resolveObject(object)
      }

      for function in symbol.functions {
        _resolveFunction(function)
      }

      for variable in symbol.variables {
        _resolveVariable(variable)
      }

      _checkInterfacesAndAbstractStatus(symbol)
    }

    def _initializeFunction(symbol FunctionSymbol) {
      symbol.resolvedType ?= Type.new(.SYMBOL, symbol)

      # Referencing a normal variable instead of a special node kind for "this"
      # makes many things much easier including lambda capture and devirtualization
      if symbol.kind == .FUNCTION_INSTANCE || symbol.kind == .FUNCTION_CONSTRUCTOR {
        var this = VariableSymbol.new(.VARIABLE_ARGUMENT, "self")
        this.initializeWithType(_cache.parameterize(symbol.parent.resolvedType))
        this.flags |= .IS_CONST
        symbol.this = this
      }

      # Lazily-initialize automatically generated functions
      if symbol.isAutomaticallyGenerated {
        if symbol.kind == .FUNCTION_CONSTRUCTOR {
          assert(symbol.name == "new")
          _automaticallyGenerateClassConstructor(symbol)
        } else if symbol.kind == .FUNCTION_INSTANCE {
          assert(symbol.name == "toString")
          _automaticallyGenerateEnumToString(symbol)
        }
      }

      _resolveParameters(symbol.parameters)

      # Resolve the argument variables
      symbol.resolvedType.argumentTypes = []
      for argument in symbol.arguments {
        argument.scope = symbol.scope
        _resolveVariable(argument)
        symbol.resolvedType.argumentTypes.append(argument.resolvedType)
      }
      symbol.argumentOnlyType = _cache.createLambdaType(symbol.resolvedType.argumentTypes, null)

      # Resolve the return type if present (no return type means "void")
      var returnType Type = null
      if symbol.returnType != null {
        if symbol.kind == .FUNCTION_CONSTRUCTOR {
          _log.semanticErrorConstructorReturnType(symbol.returnType.range)
        }

        # Explicitly handle a "void" return type for better error messages
        else if symbol.returnType.kind == .NAME && symbol.returnType.asString == "void" && symbol.scope.find("void", .NORMAL) == null {
          _log.semanticErrorVoidReturnType(symbol.returnType.range)
        }

        else {
          _resolveAsParameterizedType(symbol.returnType, symbol.scope)
          returnType = symbol.returnType.resolvedType
        }
      }

      # Constructors always return the type they construct
      if symbol.kind == .FUNCTION_CONSTRUCTOR {
        returnType = _cache.parameterize(symbol.parent.resolvedType)
        symbol.returnType = Node.createType(returnType)
      }

      # The "<=>" operator must return a numeric value for comparison with zero
      var count = symbol.arguments.count
      if symbol.name == "<=>" {
        if returnType == null || returnType != _cache.intType {
          _log.semanticErrorComparisonOperatorNotInt(symbol.returnType != null ? symbol.returnType.range : symbol.range)
          returnType = .DYNAMIC
        } else if count != 1 {
          _log.semanticErrorWrongArgumentCount(symbol.range, symbol.name, 1)
        }
      }

      # Setters must have one argument
      else if symbol.isSetter && count != 1 {
        _log.semanticErrorWrongArgumentCount(symbol.range, symbol.name, 1)
        symbol.flags &= ~.IS_SETTER
      }

      # Validate argument count
      else {
        var argumentCount = argumentCountForOperator(symbol.name)

        if argumentCount != null && !(count in argumentCount) {
          _log.semanticErrorWrongArgumentCountRange(symbol.range, symbol.name, argumentCount)
        }

        # Enforce that the initializer constructor operators take lists of
        # values to avoid confusing error messages inside the code generated
        # for initializer expressions
        else if symbol.name == "{new}" || symbol.name == "[new]" {
          for argument in symbol.arguments {
            if argument.resolvedType != .DYNAMIC && !_cache.isList(argument.resolvedType) {
              _log.semanticErrorExpectedList(argument.range, argument.name, argument.resolvedType)
            }
          }
        }
      }

      symbol.resolvedType.returnType = returnType
      _resolveAnnotations(symbol)

      # Validate the entry point after this symbol has a type
      if symbol.isEntryPoint {
        _validateEntryPoint(symbol)
      }
    }

    def _automaticallyGenerateClassConstructor(symbol FunctionSymbol) {
      # Create the function body
      var block = Node.createBlock
      symbol.block = block

      # Mirror the base constructor's arguments
      if symbol.overridden != null {
        _initializeSymbol(symbol.overridden)
        var arguments = symbol.overridden.arguments
        var base = Node.createSuper.withRange(symbol.overridden.range)
        if arguments.isEmpty {
          block.appendChild(Node.createExpression(base))
        } else {
          var call = Node.createCall(base)
          for variable in arguments {
            var argument = VariableSymbol.new(.VARIABLE_ARGUMENT, variable.name)
            argument.range = variable.range
            argument.initializeWithType(variable.resolvedType)
            symbol.arguments.append(argument)
            call.appendChild(Node.createSymbolReference(argument))
          }
          block.prependChild(Node.createExpression(call))
        }
      }

      # Add an argument for every uninitialized variable
      var parent = symbol.parent.asObjectSymbol
      _initializeSymbol(parent)
      for variable in parent.variables {
        if variable.kind == .VARIABLE_INSTANCE {
          _initializeSymbol(variable)
          if variable.value == null {
            var argument = VariableSymbol.new(.VARIABLE_ARGUMENT, variable.name)
            argument.initializeWithType(variable.resolvedType)
            argument.range = variable.range
            symbol.arguments.append(argument)
            block.appendChild(Node.createExpression(Node.createBinary(.ASSIGN,
              Node.createMemberReference(Node.createSymbolReference(symbol.this), variable),
              Node.createSymbolReference(argument)).withRange(variable.range)))
          } else {
            block.appendChild(Node.createExpression(Node.createBinary(.ASSIGN,
              Node.createMemberReference(Node.createSymbolReference(symbol.this), variable),
              variable.value.clone).withRange(variable.range)))
          }
        }
      }

      # Make constructors without arguments into getters
      if symbol.arguments.isEmpty {
        symbol.flags |= .IS_GETTER
      }
    }

    def _automaticallyGenerateEnumToString(symbol FunctionSymbol) {
      var parent = symbol.parent.asObjectSymbol
      var names = Node.createList
      _initializeSymbol(parent)

      symbol.returnType = Node.createType(_cache.stringType)
      symbol.flags |= .IS_GETTER

      # TypeScript has special enum-to-string support that we can use instead
      if _options.target is TypeScriptTarget {
        const target = Node.createName(parent.name).withSymbol(parent).withType(.DYNAMIC)
        symbol.block = Node.createBlock.appendChild(Node.createReturn(Node.createIndex(target, Node.createName("self"))))
        return
      }

      for variable in parent.variables {
        if variable.kind == .VARIABLE_ENUM_OR_FLAGS {
          assert(variable.value.asInt == names.childCount)
          names.appendChild(Node.createString(variable.name))
        }
      }

      var strings = VariableSymbol.new(.VARIABLE_GLOBAL, parent.scope.generateName("_strings"))
      strings.range = parent.range
      strings.initializeWithType(_cache.createListType(_cache.stringType))
      strings.value = names
      strings.flags |= .IS_PROTECTED | .IS_CONST | .IS_AUTOMATICALLY_GENERATED
      strings.parent = parent
      strings.scope = parent.scope
      parent.variables.append(strings)
      _resolveAsParameterizedExpressionWithConversion(strings.value, strings.scope, strings.resolvedType)

      symbol.block = Node.createBlock.appendChild(Node.createReturn(Node.createIndex(Node.createSymbolReference(strings), Node.createName("self"))))
    }

    def _resolveFunction(symbol FunctionSymbol) {
      _initializeSymbol(symbol)

      # Validate use of "def" vs "over"
      if !symbol.isObsolete {
        if symbol.overridden != null && symbol.kind == .FUNCTION_INSTANCE {
          if !symbol.isOver {
            _log.semanticErrorModifierMissingOverride(symbol.range, symbol.name, symbol.overridden.range)
          }
        } else {
          if symbol.isOver {
            _log.semanticErrorModifierUnusedOverride(symbol.range, symbol.name)
          }
        }
      }

      var scope = LocalScope.new(symbol.scope, .NORMAL)
      if symbol.this != null {
        scope.define(symbol.this, _log)
      }

      # Default values for argument variables aren't resolved with this local
      # scope since they are evaluated at the call site, not inside the
      # function body, and shouldn't have access to other arguments
      for argument in symbol.arguments {
        scope.define(argument, _log)
        _localVariableStatistics[argument.id] = LocalVariableStatistics.new(argument)
      }

      # The function is considered abstract if the body is missing
      var block = symbol.block
      if block != null {
        var firstStatement = block.firstChild
        if firstStatement != null && firstStatement.isSuperCallStatement {
          firstStatement = firstStatement.nextSibling
        }

        # User-specified constructors have variable initializers automatically inserted
        if symbol.kind == .FUNCTION_CONSTRUCTOR && !symbol.isAutomaticallyGenerated {
          for variable in symbol.parent.asObjectSymbol.variables {
            if variable.kind == .VARIABLE_INSTANCE {
              _resolveVariable(variable)

              # Attempt to create a default value if absent. Right now this
              # avoids the problem of initializing type parameters:
              #
              #   class Foo<T> {
              #     var foo T
              #     def new {}
              #     def use T { return foo }
              #   }
              #
              # This should be fixed at some point.
              if variable.value == null && !variable.resolvedType.isParameter {
                variable.value = _createDefaultValueForType(variable.resolvedType, variable.range)
              }

              if variable.value != null {
                block.insertChildBefore(firstStatement, Node.createExpression(Node.createBinary(.ASSIGN,
                  Node.createMemberReference(Node.createSymbolReference(symbol.this), variable),
                  variable.value.clone)))
              }
            }
          }
        }

        # Skip resolving irrelevant function bodies to speed up code completion
        var context = _options.completionContext
        if context != null && block.range != null && block.range.source != context.source {
          return
        }

        _resolveNode(block, scope, null)

        # Missing a return statement is an error
        if symbol.kind != .FUNCTION_CONSTRUCTOR {
          var returnType = symbol.resolvedType.returnType
          if returnType != null && !symbol.isDynamicLambda && block.hasControlFlowAtEnd {
            _log.semanticErrorMissingReturn(symbol.range, symbol.name, returnType)
          }
        }

        # Derived class constructors must start with a call to "super"
        else if symbol.parent.asObjectSymbol.baseClass != null {
          var first = block.firstChild
          if first == null || !first.isSuperCallStatement {
            _log.semanticErrorMissingSuper(firstStatement == null ? symbol.range : firstStatement.range)
          }
        }
      }

      # Global functions and functions on non-virtual types can't be abstract
      else if !symbol.isImported && !symbol.isObsolete && (symbol.kind == .FUNCTION_GLOBAL || symbol.kind == .FUNCTION_CONSTRUCTOR ||
          symbol.kind == .FUNCTION_INSTANCE && symbol.parent.kind != .OBJECT_CLASS && symbol.parent.kind != .OBJECT_INTERFACE) {
        _log.semanticErrorUnimplementedFunction(symbol.range, symbol.name)
      }
    }

    def _recordStatistic(symbol Symbol, statistic SymbolStatistic) {
      if symbol != null && (symbol.kind == .VARIABLE_LOCAL || symbol.kind == .VARIABLE_ARGUMENT) {
        var info = _localVariableStatistics.get(symbol.id, null)
        if info != null {
          switch statistic {
            case .READ { info.readCount++ }
            case .WRITE { info.writeCount++ }
          }
        }
      }
    }

    def _initializeVariable(symbol VariableSymbol) {
      var value = symbol.value

      # Normal variables may omit the initializer if the type is present
      if symbol.type != null {
        _resolveAsParameterizedType(symbol.type, symbol.scope)
        symbol.resolvedType = symbol.type.resolvedType
        symbol.state = .INITIALIZED

        # Resolve the constant now so initialized constants always have a value
        if symbol.isConst && value != null {
          _resolveAsParameterizedExpressionWithConversion(value, symbol.scope, symbol.resolvedType)
        }
      }

      # Enums take their type from their parent
      else if symbol.kind == .VARIABLE_ENUM_OR_FLAGS {
        symbol.resolvedType = symbol.parent.resolvedType
      }

      # Implicitly-typed variables take their type from their initializer
      else if value != null {
        _resolveAsParameterizedExpression(value, symbol.scope)
        var type = value.resolvedType
        symbol.resolvedType = type

        # Forbid certain types
        if !_isValidVariableType(type) {
          _log.semanticErrorBadImplicitVariableType(symbol.range, type)
          symbol.resolvedType = .DYNAMIC
        }
      }

      # Use a different error for constants which must have a type and lambda arguments which cannot have an initializer
      else if symbol.isConst || symbol.scope.kind == .FUNCTION && symbol.scope.asFunctionScope.symbol.kind == .FUNCTION_LOCAL {
        _log.semanticErrorVarMissingType(symbol.range, symbol.name)
        symbol.resolvedType = .DYNAMIC
      }

      # Variables without a type are an error
      else {
        _log.semanticErrorVarMissingValue(symbol.range, symbol.name)
        symbol.resolvedType = .DYNAMIC
      }

      # Make sure the symbol has a type node
      symbol.type ?= Node.createType(symbol.resolvedType)

      _resolveDefines(symbol)
      _resolveAnnotations(symbol)

      # Run post-annotation checks
      if symbol.resolvedType != .DYNAMIC && symbol.isConst && !symbol.isImported && value == null && symbol.kind != .VARIABLE_ENUM_OR_FLAGS && symbol.kind != .VARIABLE_INSTANCE {
        _log.semanticErrorConstMissingValue(symbol.range, symbol.name)
      }
    }

    def _resolveVariable(symbol VariableSymbol) {
      _initializeSymbol(symbol)

      if symbol.value != null {
        _resolveAsParameterizedExpressionWithConversion(symbol.value, symbol.scope, symbol.resolvedType)
      }

      # Default-initialize variables
      else if symbol.kind != .VARIABLE_ARGUMENT && symbol.kind != .VARIABLE_INSTANCE && symbol.kind != .VARIABLE_ENUM_OR_FLAGS {
        symbol.value = _createDefaultValueForType(symbol.resolvedType, symbol.range)
      }
    }

    def _createDefaultValueForType(type Type, range Range) Node {
      var unwrapped = _cache.unwrappedType(type)

      if unwrapped == _cache.intType {
        return Node.createInt(0).withType(type)
      }

      if unwrapped == _cache.doubleType {
        return Node.createDouble(0).withType(type)
      }

      if unwrapped == _cache.boolType {
        return Node.createBool(false).withType(type)
      }

      if unwrapped.isEnumOrFlags {
        return Node.createCast(_cache.createInt(0), Node.createType(type)).withType(type)
      }

      if unwrapped.isParameter {
        _log.semanticErrorNoDefaultValue(range, type)
        return null
      }

      assert(unwrapped.isReference)
      return Node.createNull.withType(type)
    }

    def _initializeOverloadedFunction(symbol OverloadedFunctionSymbol) {
      var symbols = symbol.symbols
      symbol.resolvedType ?= Type.new(.SYMBOL, symbol)

      # Ensure no two overloads have the same argument types
      var i = 0
      while i < symbols.count {
        var function = symbols[i]
        _initializeSymbol(function)
        symbol.flags |= function.flags & .IS_SETTER

        var equivalence TypeCache.Equivalence = .NOT_EQUIVALENT
        var index = -1
        for j in 0..i {
          equivalence = _cache.areFunctionSymbolsEquivalent(function, null, symbols[j], null)
          if equivalence != .NOT_EQUIVALENT {
            index = j
            break
          }
        }

        if index == -1 {
          i++
          continue
        }

        var other = symbols[index]
        var parent = symbol.parent.asObjectSymbol
        var isFromSameObject = function.parent == other.parent
        var areReturnTypesDifferent = equivalence == .EQUIVALENT_EXCEPT_RETURN_TYPE && (isFromSameObject || symbol.kind == .OVERLOADED_INSTANCE)

        # Symbols should be in the base type chain
        assert(parent.isSameOrHasBaseClass(function.parent))
        assert(parent.isSameOrHasBaseClass(other.parent))

        # Forbid overloading by return type
        if !isFromSameObject && areReturnTypesDifferent {
          var derived = function.parent == parent ? function : other
          var base = derived == function ? other : function
          _log.semanticErrorBadOverrideReturnType(derived.range, derived.name, parent.baseType, base.range)
          if isFromSameObject {
            function.flags |= .IS_OBSOLETE
          }
        }

        # Allow duplicate function declarations with the same type to merge
        # as long as there are not two declarations that provide implementations.
        # Mark the obsolete function as obsolete instead of removing it so it
        # doesn't potentially mess up iteration in a parent call stack.
        else if areReturnTypesDifferent || isFromSameObject && function.block != null && other.block != null {
          _log.semanticErrorDuplicateOverload(function.range, symbol.name, other.range)
          if isFromSameObject {
            function.flags |= .IS_OBSOLETE
          }
        }

        # Keep "function"
        else if isFromSameObject ? function.block != null : function.parent.asObjectSymbol.hasBaseClass(other.parent) {
          if function.parent == parent && other.parent == parent {
            function.mergeInformationFrom(other)
            function.flags |= function.block != null ? other.flags & ~.IS_IMPORTED : other.flags
            other.flags |= .IS_OBSOLETE
          } else if !isFromSameObject {
            function.overridden = other
          }
          symbols[index] = function
        }

        # Keep "other"
        else {
          if function.parent == parent && other.parent == parent {
            other.flags |= other.block != null ? function.flags & ~.IS_IMPORTED : function.flags
            other.mergeInformationFrom(function)
            function.flags |= .IS_OBSOLETE
          } else if !isFromSameObject {
            other.overridden = function
          }
        }

        # Remove the symbol after the merge
        symbols.removeAt(i)
      }
    }

    # Put the guts of the function inside another function because V8 doesn't
    # optimize functions with try-catch statements
    def _resolveNodeSwitch(node Node, scope Scope, context Type) {
      switch node.kind {
        case .BLOCK { _resolveBlock(node, scope) }
        case .PAIR { _resolvePair(node, scope, context) }

        # Statements
        case .BREAK, .CONTINUE { _resolveJump(node, scope) }
        case .COMMENT_BLOCK {}
        case .EXPRESSION { _resolveExpression(node, scope) }
        case .FOR { _resolveFor(node, scope) }
        case .FOREACH { _resolveForeach(node, scope) }
        case .IF { _resolveIf(node, scope) }
        case .RETURN { _resolveReturn(node, scope) }
        case .SWITCH { _resolveSwitch(node, scope) }
        case .THROW { _resolveThrow(node, scope) }
        case .TRY { _resolveTry(node, scope) }
        case .VARIABLE { _resolveVariable(node, scope) }
        case .VARIABLES { _resolveVariables(node, scope) }
        case .WHILE { _resolveWhile(node, scope) }

        # Expressions
        case .ASSIGN_INDEX { _resolveOperatorOverload(node, scope, context) }
        case .CALL { _resolveCall(node, scope, context) }
        case .CAST { _resolveCast(node, scope, context) }
        case .COMPLEMENT, .NEGATIVE, .NOT, .POSITIVE, .POSTFIX_DECREMENT, .POSTFIX_INCREMENT, .PREFIX_DECREMENT, .PREFIX_INCREMENT {
          _resolveOperatorOverload(node, scope, context)
        }
        case .CONSTANT { _resolveConstant(node, scope, context) }
        case .DOT { _resolveDot(node, scope, context) }
        case .HOOK { _resolveHook(node, scope, context) }
        case .INDEX { _resolveOperatorOverload(node, scope, context) }
        case .INITIALIZER_LIST, .INITIALIZER_MAP { _resolveInitializer(node, scope, context) }
        case .LAMBDA { _resolveLambda(node, scope, context) }
        case .LAMBDA_TYPE { _resolveLambdaType(node, scope) }
        case .NAME { _resolveName(node, scope) }
        case .NULL { node.resolvedType = .NULL }
        case .NULL_DOT { _resolveNullDot(node, scope) }
        case .PARAMETERIZE { _resolveParameterize(node, scope) }
        case .PARSE_ERROR { node.resolvedType = .DYNAMIC }
        case .SEQUENCE { _resolveSequence(node, scope, context) }
        case .STRING_INTERPOLATION { _resolveStringInterpolation(node, scope) }
        case .SUPER { _resolveSuper(node, scope) }
        case .TYPE {}
        case .TYPE_CHECK { _resolveTypeCheck(node, scope) }
        case .XML { _resolveXML(node, scope) }

        default {
          if node.kind.isBinary { _resolveBinary(node, scope, context) }
          else { assert(false) }
        }
      }
    }

    def _resolveNode(node Node, scope Scope, context Type) {
      if node.resolvedType != null {
        return # Only resolve once
      }

      node.resolvedType = .DYNAMIC
      try {
        _resolveNodeSwitch(node, scope, context)
      }

      # If guard merging failed, reset the type so we'll try again next time
      catch failure GuardMergingFailure {
        node.resolvedType = null
        throw failure
      }

      assert(node.resolvedType != null)
    }

    def _resolveAsParameterizedType(node Node, scope Scope) {
      assert(node.kind.isExpression)
      node.flags |= .SHOULD_EXPECT_TYPE
      _resolveNode(node, scope, null)
      _checkIsType(node)
      _checkIsParameterized(node)
    }

    def _resolveAsParameterizedExpression(node Node, scope Scope) {
      assert(node.kind.isExpression)
      _resolveNode(node, scope, null)
      _checkIsInstance(node)
      _checkIsParameterized(node)
    }

    def _resolveAsParameterizedExpressionWithTypeContext(node Node, scope Scope, type Type) {
      assert(node.kind.isExpression)
      _resolveNode(node, scope, type)
      _checkIsInstance(node)
      _checkIsParameterized(node)
    }

    def _resolveAsParameterizedExpressionWithConversion(node Node, scope Scope, type Type) {
      _resolveAsParameterizedExpressionWithTypeContext(node, scope, type)
      _checkConversion(node, type, .IMPLICIT)
    }

    def _resolveChildrenAsParameterizedExpressions(node Node, scope Scope) {
      for child = node.firstChild; child != null; child = child.nextSibling {
        _resolveAsParameterizedExpression(child, scope)
      }
    }

    def _resolveChildrenAsParameterizedExpressionsWithDynamicTypeContext(node Node, scope Scope) {
      for child = node.firstChild; child != null; child = child.nextSibling {
        _resolveAsParameterizedExpressionWithTypeContext(child, scope, .DYNAMIC)
      }
    }

    def _checkUnusedExpression(node Node) {
      var kind = node.kind
      if kind == .HOOK {
        _checkUnusedExpression(node.hookTrue)
        _checkUnusedExpression(node.hookFalse)
      } else if node.range != null && node.resolvedType != .DYNAMIC && kind != .CALL && !kind.isAssign {
        _log.semanticWarningUnusedExpression(node.range)
      }
    }

    def _checkIsInstance(node Node) {
      if node.resolvedType != .DYNAMIC && node.isType {
        _log.semanticErrorUnexpectedType(node.range, node.resolvedType)
        node.resolvedType = .DYNAMIC
      }
    }

    def _checkIsType(node Node) {
      if node.resolvedType != .DYNAMIC && !node.isType {
        _log.semanticErrorUnexpectedExpression(node.range, node.resolvedType)
        node.resolvedType = .DYNAMIC
      }
    }

    def _checkIsParameterized(node Node) {
      if node.resolvedType.parameters != null && !node.resolvedType.isParameterized {
        _log.semanticErrorUnparameterizedType(node.range, node.resolvedType)
        node.resolvedType = .DYNAMIC
      }
    }

    def _checkStorage(node Node, scope Scope) {
      var symbol = node.symbol

      # Only allow storage to variables
      if node.kind != .NAME && node.kind != .DOT && (node.kind != .INDEX || node.resolvedType != .DYNAMIC) || symbol != null && !symbol.kind.isVariable {
        _log.semanticErrorBadStorage(node.range)
      }

      # Forbid storage to constants
      else if symbol != null && symbol.isConst {
        var function = scope.findEnclosingFunction

        # Allow assignments to constants inside constructors
        if function == null || function.symbol.kind != .FUNCTION_CONSTRUCTOR || function.symbol.parent != symbol.parent || symbol.kind != .VARIABLE_INSTANCE {
          _log.semanticErrorStorageToConstSymbol(node.internalRangeOrRange, symbol.name)
        }
      }
    }

    def _checkAccess(node Node, range Range, scope Scope) {
      var symbol = node.symbol
      if symbol == null {
        return
      }

      # Check access control
      if symbol.isProtected {
        while scope != null {
          if scope.kind == .OBJECT {
            var object = scope.asObjectScope.symbol
            if object.isSameOrHasBaseClass(symbol.parent) {
              return
            }
          }
          scope = scope.parent
        }
        _log.semanticErrorAccessViolation(range, symbol.name)
      }

      # Deprecation annotations optionally provide a warning message
      if symbol.isDeprecated {
        for annotation in symbol.annotations {
          if annotation.symbol != null && annotation.symbol.fullName == "@deprecated" {
            var value = annotation.annotationValue
            if value.kind == .CALL && value.hasTwoChildren {
              var last = value.lastChild
              if last.kind == .CONSTANT && last.content.kind == .STRING {
                _log.append(_log.newWarning(range, last.content.asString))
                return
              }
            }
          }
        }
        _log.semanticWarningDeprecatedUsage(range, symbol.name)
      }
    }

    def _checkConversion(node Node, to Type, kind ConversionKind) {
      var from = node.resolvedType
      assert(from != null)
      assert(to != null)

      # The "dynamic" type is a hole in the type system
      if from == .DYNAMIC || to == .DYNAMIC {
        return
      }

      # No conversion is needed for identical types
      if from == to {
        return
      }

      # The implicit conversion must be valid
      if kind == .IMPLICIT && !_cache.canImplicitlyConvert(from, to) ||
          kind == .EXPLICIT && !_cache.canExplicitlyConvert(from, to) {
        _log.semanticErrorIncompatibleTypes(node.range, from, to, _cache.canExplicitlyConvert(from, to))
        node.resolvedType = .DYNAMIC
        return
      }

      # Make the implicit conversion explicit for convenience later on
      if kind == .IMPLICIT {
        node.become(Node.createCast(node.cloneAndStealChildren, Node.createType(to)).withType(to).withRange(node.range))
      }
    }

    def _resolveAnnotation(node Node, symbol Symbol) bool {
      var value = node.annotationValue
      var test = node.annotationTest

      _resolveNode(value, symbol.scope, null)
      if test != null {
        _resolveAsParameterizedExpressionWithConversion(test, symbol.scope, _cache.boolType)
      }

      # Terminate early when there were errors
      if value.symbol == null {
        return false
      }

      # Make sure annotations have the arguments they need
      if value.kind != .CALL {
        _log.semanticErrorArgumentCount(value.range, value.symbol.resolvedType.argumentTypes.count, 0, value.symbol.name, value.symbol.range)
        return false
      }

      # Ensure all arguments are constants
      var isValid = true
      for child = value.callValue.nextSibling; child != null; child = child.nextSibling {
        isValid = isValid && _recursivelyResolveAsConstant(child)
      }
      if !isValid {
        return false
      }

      # Only store symbols for annotations with the correct arguments for ease of use
      node.symbol = value.symbol

      # Apply built-in annotation logic
      var flag = _annotationSymbolFlags.get(value.symbol.fullName, 0)
      if flag != 0 {
        switch flag {
          case .IS_DEPRECATED {}
          case .IS_ENTRY_POINT { isValid = symbol.kind == .FUNCTION_GLOBAL }
          case .IS_EXPORTED { isValid = !symbol.isImported }
          case .IS_IMPORTED { isValid = !symbol.isExported && (!symbol.kind.isFunction || symbol.asFunctionSymbol.block == null) }
          case .IS_INLINING_FORCED, .IS_INLINING_PREVENTED, .IS_PREFERRED { isValid = symbol.kind.isFunction }
          case .IS_RENAMED {}
          case .IS_SKIPPED { isValid = symbol.kind.isFunction && symbol.resolvedType.returnType == null }
          case .SHOULD_SPREAD { isValid = symbol.kind == .FUNCTION_ANNOTATION }
        }
        if flag == .IS_INLINING_FORCED {
          _options.isAlwaysInlinePresent = true
        }
        if !isValid {
          _log.semanticErrorInvalidAnnotation(value.range, value.symbol.name, symbol.name)
          return false
        }

        # Don't add an annotation when the test expression is false
        if test != null && _recursivelyResolveAsConstant(test) && test.isFalse {
          return false
        }

        # Only warn about duplicate annotations after checking the test expression
        if (symbol.flags & flag) != 0 {
          if (symbol.parent.flags & flag & (.IS_IMPORTED | .IS_EXPORTED)) != 0 {
            _log.semanticWarningRedundantAnnotation(value.range, value.symbol.name, symbol.name, symbol.parent.name)
          } else {
            _log.semanticWarningDuplicateAnnotation(value.range, value.symbol.name, symbol.name)
          }
        }

        symbol.flags |= flag

        # Store the new name for later
        if flag == .IS_RENAMED && value.hasTwoChildren {
          symbol.rename = value.lastChild.asString
        }
      }

      return true
    }

    def _recursivelyResolveAsConstant(node Node) bool {
      _constantFolder.foldConstants(node)

      if node.kind != .CONSTANT {
        _log.semanticErrorExpectedConstant(node.range)
        return false
      }

      return true
    }

    def _resolveBlock(node Node, scope Scope) {
      assert(node.kind == .BLOCK)
      _controlFlow.pushBlock(node)

      for child = node.firstChild, next Node = null; child != null; child = next {
        var prev = child.previousSibling
        next = child.nextSibling

        # There is a well-known ambiguity in languages like JavaScript where
        # a return statement followed by a newline and a value can either be
        # parsed as a single return statement with a value or as two
        # statements, a return statement without a value and an expression
        # statement. Luckily, we're better off than JavaScript since we know
        # the type of the function. Parse a single statement in a non-void
        # function but two statements in a void function.
        if child.kind == .RETURN && next != null && child.returnValue == null && next.kind == .EXPRESSION {
          var function = scope.findEnclosingFunctionOrLambda.symbol
          if function.kind != .FUNCTION_CONSTRUCTOR && function.resolvedType.returnType != null {
            var statement = next.remove
            var value = statement.expressionValue.remove
            child.appendChild(value)
            var trailing = Comment.lastTrailingComment(statement.comments)
            var notTrailing = Comment.withoutLastTrailingComment(statement.comments)
            if trailing != null {
              child.comments = Comment.concat(child.comments, [trailing])
            }
            value.comments = Comment.concat(notTrailing, value.comments)
            next = child.nextSibling
            assert(child.returnValue != null)
          }
        }

        _resolveNode(child, scope, null)

        # Visit control flow from the previous node to the next node, which
        # should handle the case where this node was replaced with something
        for n = prev != null ? prev.nextSibling : node.firstChild; n != next; n = n.nextSibling {
          _controlFlow.visitStatementInPostOrder(n)
        }

        # Stop now if the child was removed
        if child.parent == null {
          continue
        }

        # The "@skip" annotation removes function calls after type checking
        if child.kind == .EXPRESSION {
          var value = child.expressionValue
          if value.kind == .CALL && value.symbol != null && value.symbol.isSkipped {
            child.remove
          }
        }
      }

      _controlFlow.popBlock(node)
    }

    def _resolvePair(node Node, scope Scope, context Type) {
      # Allow resolving a pair with a type context of "dynamic" to
      # deliberately silence errors around needing type context
      if context == .DYNAMIC {
        _resolveAsParameterizedExpressionWithConversion(node.firstValue, scope, context)
        _resolveAsParameterizedExpressionWithConversion(node.secondValue, scope, context)
        return
      }

      _resolveAsParameterizedExpression(node.firstValue, scope)
      _resolveAsParameterizedExpression(node.secondValue, scope)
    }

    def _resolveJump(node Node, scope Scope) {
      if scope.findEnclosingLoop == null {
        _log.semanticErrorBadJump(node.range, node.kind == .BREAK ? "break" : "continue")
      }
    }

    def _resolveExpressionOrImplicitReturn(node Node, value Node, scope Scope) {
      var hook = _sinkNullDotIntoHook(value, scope, null)

      # Turn top-level "?." expressions into if statements
      if hook != null {
        var test = hook.hookTest
        var yes = hook.hookTrue
        var block = Node.createBlock.appendChild(Node.createExpression(yes.remove).withRange(yes.range)).withRange(yes.range)
        node.become(Node.createIf(test.remove, block, null).withRange(node.range).withComments(node.comments))
        _resolveNode(node, scope, null)
      }

      # Turn top-level "?=" expressions into if statements
      else if value.kind == .ASSIGN_NULL {
        var left = value.binaryLeft
        var right = value.binaryRight
        _resolveAsParameterizedExpressionWithTypeContext(left, scope, null)
        _checkStorage(left, scope)
        var test = Node.createBinary(.EQUAL, _extractExpressionForAssignment(left, scope), Node.createNull).withRange(left.range)
        var assign = Node.createBinary(.ASSIGN, left.remove, right.remove).withRange(node.range).withFlags(.WAS_ASSIGN_NULL)
        var block = Node.createBlock.appendChild(Node.createExpression(assign).withRange(node.range)).withRange(node.range)
        node.become(Node.createIf(test, block, null).withRange(node.range).withComments(node.comments))
        _resolveNode(node, scope, null)
      }

      # Normal expression statement
      else {
        _resolveAsParameterizedExpression(value, scope)
      }
    }

    def _resolveExpression(node Node, scope Scope) {
      var value = node.expressionValue
      _resolveExpressionOrImplicitReturn(node, value, scope)

      # Only continue this didn't get turned into an if statement due to a top-level "?." or "?=" expression
      if node.kind == .EXPRESSION {
        _checkUnusedExpression(value)
      }
    }

    def _resolveFor(node Node, scope Scope) {
      var setup = node.forSetup
      var update = node.forUpdate
      scope = LocalScope.new(scope, .LOOP)
      if setup.kind == .VARIABLES {
        _resolveNode(setup, scope, null)

        # All for loop variables must have the same type. This is a requirement
        # for one-to-one code emission in the languages we want to target.
        var type = setup.firstChild.symbol.resolvedType
        for child = setup.firstChild.nextSibling; child != null; child = child.nextSibling {
          var symbol = child.symbol
          if symbol.resolvedType != type {
            _log.semanticErrorForLoopDifferentType(symbol.range, symbol.name, symbol.resolvedType, type)
            break
          }
        }
      } else {
        _resolveAsParameterizedExpression(setup, scope)
      }
      _resolveAsParameterizedExpressionWithConversion(node.forTest, scope, _cache.boolType)
      _resolveAsParameterizedExpression(update, scope)
      if update.kind == .SEQUENCE {
        for child = update.firstChild; child != null; child = child.nextSibling {
          _checkUnusedExpression(child)
        }
      }
      _resolveBlock(node.forBlock, scope)
    }

    def _resolveForeach(node Node, scope Scope) {
      var type Type = .DYNAMIC
      scope = LocalScope.new(scope, .LOOP)

      var value = node.foreachValue
      _resolveAsParameterizedExpression(value, scope)

      # Support "for i in 0..10"
      if value.kind == .PAIR {
        var first = value.firstValue
        var second = value.secondValue
        type = _cache.intType
        _checkConversion(first, _cache.intType, .IMPLICIT)
        _checkConversion(second, _cache.intType, .IMPLICIT)

        # The ".." syntax only counts up, unlike CoffeeScript
        if first.isInt && second.isInt && first.asInt >= second.asInt {
          _log.semanticWarningEmptyRange(value.range)
        }
      }

      # Support "for i in [1, 2, 3]"
      else if _cache.isList(value.resolvedType) {
        type = value.resolvedType.substitutions[0]
      }

      # Anything else is an error
      else if value.resolvedType != .DYNAMIC {
        _log.semanticErrorBadForValue(value.range, value.resolvedType)
      }

      # Special-case symbol initialization with the type
      var symbol = node.symbol.asVariableSymbol
      scope.asLocalScope.define(symbol, _log)
      _localVariableStatistics[symbol.id] = LocalVariableStatistics.new(symbol)
      symbol.initializeWithType(type)
      symbol.flags |= .IS_CONST | .IS_LOOP_VARIABLE

      _resolveBlock(node.foreachBlock, scope)

      # Collect foreach loops and convert them in another pass
      _foreachLoops.append(node)
    }

    def _resolveIf(node Node, scope Scope) {
      var test = node.ifTest
      var ifFalse = node.ifFalse
      _resolveAsParameterizedExpressionWithConversion(test, scope, _cache.boolType)
      _resolveBlock(node.ifTrue, LocalScope.new(scope, .NORMAL))
      if ifFalse != null {
        _resolveBlock(ifFalse, LocalScope.new(scope, .NORMAL))
      }
    }

    def _resolveReturn(node Node, scope Scope) {
      var value = node.returnValue
      var function = scope.findEnclosingFunctionOrLambda.symbol
      var returnType = function.kind != .FUNCTION_CONSTRUCTOR ? function.resolvedType.returnType : null

      # Check for a returned value
      if value == null {
        if returnType != null && !function.isDynamicLambda {
          _log.semanticErrorExpectedReturnValue(node.range, returnType)
        }
        return
      }

      # Check the type of the returned value
      if returnType != null {
        _resolveAsParameterizedExpressionWithConversion(value, scope, returnType)

        if function.shouldInferReturnType && _isCallReturningVoid(value) {
          node.kind = .EXPRESSION
        }
        return
      }

      # If there's no return type, still check for other errors
      if node.isImplicitReturn {
        _resolveExpressionOrImplicitReturn(node, value, scope)

        # Stop now if this got turned into an if statement due to a top-level "?." or "?=" expression
        if node.kind != .RETURN {
          return
        }
      } else {
        _resolveAsParameterizedExpression(value, scope)
      }

      # Lambdas without a return type or an explicit "return" statement get special treatment
      if !node.isImplicitReturn {
        _log.semanticErrorUnexpectedReturnValue(value.range)
        return
      }

      # Check for a return value of type "void"
      if !function.shouldInferReturnType || _isCallReturningVoid(value) {
        _checkUnusedExpression(value)
        node.kind = .EXPRESSION
        return
      }

      # Check for an invalid return type
      var type = value.resolvedType
      if !_isValidVariableType(type) {
        _log.semanticErrorBadReturnType(value.range, type)
        node.kind = .EXPRESSION
        return
      }

      # Mutate the return type to the type from the returned value
      function.returnType = Node.createType(type)
      function.resolvedType.returnType = type
    }

    def _resolveSwitch(node Node, scope Scope) {
      var duplicateCases IntMap<Range> = {}
      var mustEnsureConstantIntegers = _options.target.requiresIntegerSwitchStatements
      var allValuesAreIntegers = true
      var value = node.switchValue
      _resolveAsParameterizedExpression(value, scope)

      for child = value.nextSibling; child != null; child = child.nextSibling {
        var block = child.caseBlock

        # Resolve all case values
        for caseValue = child.firstChild; caseValue != block; caseValue = caseValue.nextSibling {
          _resolveAsParameterizedExpressionWithConversion(caseValue, scope, value.resolvedType)

          var symbol = caseValue.symbol
          var integer = 0

          # Check for a constant variable, which may just be read-only with a
          # value determined at runtime
          if symbol != null && (mustEnsureConstantIntegers ? symbol.kind == .VARIABLE_ENUM_OR_FLAGS : symbol.kind.isVariable && symbol.isConst) {
            var constant = _constantFolder.constantForSymbol(symbol.asVariableSymbol)
            if constant == null || constant.kind != .INT {
              allValuesAreIntegers = false
              continue
            }
            integer = constant.asInt
          }

          # Fall back to the constant folder only as a last resort because it
          # mutates the syntax tree and harms readability
          else {
            _constantFolder.foldConstants(caseValue)
            if !caseValue.isInt {
              allValuesAreIntegers = false
              continue
            }
            integer = caseValue.asInt
          }

          # Duplicate case detection
          var previous = duplicateCases.get(integer, null)
          if previous != null {
            _log.semanticErrorDuplicateCase(caseValue.range, previous)
          } else {
            duplicateCases[integer] = caseValue.range
          }
        }

        # The default case must be last, makes changing into an if chain easier later
        if child.hasOneChild && child.nextSibling != null {
          _log.semanticErrorDefaultCaseNotLast(child.range)
        }

        _resolveBlock(block, LocalScope.new(scope, .NORMAL))
      }

      # Fall back to an if statement if the case values aren't compile-time
      # integer constants, which is requried by many language targets
      if !allValuesAreIntegers && mustEnsureConstantIntegers {
        _convertSwitchToIfChain(node, scope)
      }
    }

    def _resolveThrow(node Node, scope Scope) {
      var value = node.throwValue
      _resolveAsParameterizedExpression(value, scope)
    }

    def _resolveVariable(node Node, scope Scope) {
      var symbol = node.symbol.asVariableSymbol
      scope.asLocalScope.define(symbol, _log)
      _localVariableStatistics[symbol.id] = LocalVariableStatistics.new(symbol)
      _resolveVariable(symbol)

      # Make sure to parent any created values under the variable node
      if !node.hasChildren && symbol.value != null {
        node.appendChild(symbol.value)
      }
    }

    def _resolveVariables(node Node, scope Scope) {
      for child = node.firstChild; child != null; child = child.nextSibling {
        _resolveVariable(child, scope)
      }
    }

    def _resolveTry(node Node, scope Scope) {
      var tryBlock = node.tryBlock
      var finallyBlock = node.finallyBlock
      _resolveBlock(tryBlock, LocalScope.new(scope, .NORMAL))

      # Bare try statements catch all thrown values
      if node.hasOneChild {
        node.appendChild(Node.createCatch(null, Node.createBlock))
      }

      # Check catch statements
      for child = tryBlock.nextSibling; child != finallyBlock; child = child.nextSibling {
        var childScope = LocalScope.new(scope, .NORMAL)
        if child.symbol != null {
          var symbol = child.symbol.asVariableSymbol
          childScope.define(symbol, _log)
          _resolveVariable(symbol)
        }
        _resolveBlock(child.catchBlock, childScope)
      }

      # Check finally block
      if finallyBlock != null {
        _resolveBlock(finallyBlock, LocalScope.new(scope, .NORMAL))
      }
    }

    def _resolveWhile(node Node, scope Scope) {
      _resolveAsParameterizedExpressionWithConversion(node.whileTest, scope, _cache.boolType)
      _resolveBlock(node.whileBlock, LocalScope.new(scope, .LOOP))
    }

    def _resolveCall(node Node, scope Scope, context Type) {
      var hook = _sinkNullDotIntoHook(node, scope, context)
      if hook != null {
        node.become(hook)
        _resolveAsParameterizedExpressionWithTypeContext(node, scope, context)
        return
      }

      var value = node.callValue

      # Take argument types from call argument values for immediately-invoked
      # function expressions:
      #
      #   var foo = ((a, b) => a + b)(1, 2)
      #   var bar int = ((a, b) => { return a + b })(1, 2)
      #
      if value.kind == .LAMBDA {
        var symbol = value.symbol.asFunctionSymbol
        var arguments = symbol.arguments
        if node.childCount == arguments.count + 1 {
          var child = value.nextSibling
          for i in 0..arguments.count {
            var argument = arguments[i]
            if argument.type == null {
              _resolveAsParameterizedExpression(child, scope)
              argument.type = Node.createType(child.resolvedType)
            }
            child = child.nextSibling
          }
          if context != null && symbol.returnType == null {
            symbol.returnType = Node.createType(context)
          }
        }
      }

      _resolveAsParameterizedExpression(value, scope)
      var type = value.resolvedType

      switch type.kind {
        # Each function has its own type for simplicity
        case .SYMBOL {
          if _resolveSymbolCall(node, scope, type) {
            return
          }
        }

        # Lambda types look like "fn(int, int) int"
        case .LAMBDA {
          if _resolveFunctionCall(node, scope, type) {
            return
          }
        }

        # Can't call other types (the null type, for example)
        default {
          if type != .DYNAMIC {
            _log.semanticErrorInvalidCall(node.internalRangeOrRange, value.resolvedType)
          }
        }
      }

      # If there was an error, resolve the arguments to check for further
      # errors but use a dynamic type context to avoid introducing errors
      for child = value.nextSibling; child != null; child = child.nextSibling {
        _resolveAsParameterizedExpressionWithConversion(child, scope, .DYNAMIC)
      }
    }

    def _resolveSymbolCall(node Node, scope Scope, type Type) bool {
      var symbol = type.symbol

      # Getters are called implicitly, so explicitly calling one is an error.
      # This error prevents a getter returning a lambda which is then called.
      # To overcome this, wrap the call in parentheses:
      #
      #   def foo fn()
      #
      #   def bar {
      #     foo()   # Error
      #     (foo)() # Correct
      #   }
      #
      if symbol.isGetter && _isCallValue(node) && !node.callValue.isInsideParentheses {
        if symbol.resolvedType.returnType != null && symbol.resolvedType.returnType.kind == .LAMBDA {
          _log.semanticErrorGetterRequiresWrap(node.range, symbol.name, symbol.range)
        } else {
          _log.semanticErrorGetterCalledTwice(node.parent.internalRangeOrRange, symbol.name, symbol.range)
        }
        _resolveChildrenAsParameterizedExpressionsWithDynamicTypeContext(node, scope)
        return false
      }

      # Check for calling a function directly
      if symbol.kind.isFunction {
        return _resolveFunctionCall(node, scope, type)
      }

      # Check for calling a set of functions, must not be ambiguous
      if symbol.kind.isOverloadedFunction {
        return _resolveOverloadedFunctionCall(node, scope, type)
      }

      # Can't call other symbols
      _log.semanticErrorInvalidCall(node.internalRangeOrRange, node.callValue.resolvedType)
      return false
    }

    def _resolveFunctionCall(node Node, scope Scope, type Type) bool {
      var function = type.symbol?.asFunctionSymbol
      var expected = type.argumentTypes.count
      var count = node.childCount - 1
      node.symbol = function

      # Use the return type even if there were errors
      if type.returnType != null {
        node.resolvedType = type.returnType
      }

      # There is no "void" type, so make sure this return value isn't used
      else if _isExpressionUsed(node) {
        if function != null {
          _log.semanticErrorUseOfVoidFunction(node.range, function.name, function.range)
        } else {
          _log.semanticErrorUseOfVoidLambda(node.range)
        }
      }

      # Check argument count
      if expected != count {
        _log.semanticErrorArgumentCount(node.internalRangeOrRange, expected, count, function?.name, function?.range)
        _resolveChildrenAsParameterizedExpressionsWithDynamicTypeContext(node, scope)
        return false
      }

      # Check argument types
      var value = node.firstChild
      var child = value.nextSibling
      for argumentType in type.argumentTypes {
        _resolveAsParameterizedExpressionWithConversion(child, scope, argumentType)
        child = child.nextSibling
      }

      # Forbid constructing an abstract type
      if function != null && function.kind == .FUNCTION_CONSTRUCTOR && value.kind != .SUPER {
        _checkInterfacesAndAbstractStatus(function.parent.asObjectSymbol)
        var reason = function.parent.asObjectSymbol.isAbstractBecauseOf
        if reason != null {
          _log.semanticErrorAbstractNew(node.internalRangeOrRange, function.parent.resolvedType, reason.range, reason.name)
        }
      }

      # Replace overloaded symbols with the chosen overload
      if value.kind == .PARAMETERIZE {
        value = value.parameterizeValue
      }
      if function != null && value.symbol != null && value.symbol.kind.isOverloadedFunction && function in value.symbol.asOverloadedFunctionSymbol.symbols {
        value.symbol = function
        value.resolvedType = type
      }

      return true
    }

    def _resolveOverloadedFunction(range Range, node Node, scope Scope, symbolType Type) Type {
      var overloaded = symbolType.symbol.asOverloadedFunctionSymbol
      var firstArgument = node.firstChild.nextSibling
      var count = node.childCount - 1
      var candidates List<Type> = []

      # Filter by argument length and substitute using the current type environment
      for symbol in overloaded.symbols {
        if symbol.arguments.count == count || overloaded.symbols.count == 1 {
          candidates.append(_cache.substitute(symbol.resolvedType, symbolType.environment))
        }
      }

      # Check for matches
      if candidates.isEmpty {
        _log.semanticErrorNoMatchingOverload(range, overloaded.name, count, null)
        return null
      }

      # Check for an unambiguous match
      if candidates.count == 1 {
        return candidates[0]
      }

      # First filter by syntactic structure impossibilities. This helps break
      # the chicken-and-egg problem of needing to resolve argument types to
      # get a match and needing a match to resolve argument types. For example,
      # a list literal needs type context to resolve correctly.
      var index = 0
      while index < candidates.count {
        var child = firstArgument
        for type in candidates[index].argumentTypes {
          var kind = child.kind
          if kind == .NULL && !type.isReference ||
              kind == .INITIALIZER_LIST && _findMember(type, "[new]") == null && _findMember(type, "[...]") == null ||
              kind == .INITIALIZER_MAP && _findMember(type, "{new}") == null && _findMember(type, "{...}") == null ||
              kind == .LAMBDA && (type.kind != .LAMBDA || type.argumentTypes.count != child.symbol.asFunctionSymbol.arguments.count) {
            candidates.removeAt(index)
            index--
            break
          }
          child = child.nextSibling
        }
        index++
      }

      # Check for an unambiguous match
      if candidates.count == 1 {
        return candidates[0]
      }

      # If that still didn't work, resolve the arguments without type context
      for child = firstArgument; child != null; child = child.nextSibling {
        _resolveAsParameterizedExpression(child, scope)
      }

      # Try again, this time discarding all implicit conversion failures
      index = 0
      while index < candidates.count {
        var child = firstArgument
        for type in candidates[index].argumentTypes {
          if !_cache.canImplicitlyConvert(child.resolvedType, type) {
            candidates.removeAt(index)
            index--
            break
          }
          child = child.nextSibling
        }
        index++
      }

      # Check for an unambiguous match
      if candidates.count == 1 {
        return candidates[0]
      }

      # Extract argument types for an error if there is one
      var childTypes List<Type> = []
      for child = firstArgument; child != null; child = child.nextSibling {
        childTypes.append(child.resolvedType)
      }

      # Give up without a match
      if candidates.isEmpty {
        _log.semanticErrorNoMatchingOverload(range, overloaded.name, count, childTypes)
        return null
      }

      # If that still didn't work, try type equality
      for type in candidates {
        var isMatch = true
        for i in 0..count {
          if childTypes[i] != type.argumentTypes[i] {
            isMatch = false
            break
          }
        }
        if isMatch {
          return type
        }
      }

      # If that still didn't work, try picking the preferred overload
      var firstPreferred Type = null
      var secondPreferred Type = null
      for type in candidates {
        if type.symbol.isPreferred {
          secondPreferred = firstPreferred
          firstPreferred = type
        }
      }

      # Check for a single preferred overload
      if firstPreferred != null && secondPreferred == null {
        return firstPreferred
      }

      # Give up since the overload is ambiguous
      _log.semanticErrorAmbiguousOverload(range, overloaded.name, count, childTypes)
      return null
    }

    def _resolveOverloadedFunctionCall(node Node, scope Scope, type Type) bool {
      var match = _resolveOverloadedFunction(node.callValue.range, node, scope, type)
      if match != null && _resolveFunctionCall(node, scope, match) {
        _checkAccess(node, node.callValue.internalRangeOrRange, scope)
        return true
      }
      return false
    }

    def _resolveCast(node Node, scope Scope, context Type) {
      var value = node.castValue
      var type = node.castType
      var neededTypeContext = _needsTypeContext(value)

      _resolveAsParameterizedType(type, scope)
      _resolveAsParameterizedExpressionWithTypeContext(value, scope, type.resolvedType)
      _checkConversion(value, type.resolvedType, .EXPLICIT)
      node.resolvedType = type.resolvedType

      # Warn about unnecessary casts
      var range = node.internalRangeOrRange
      if range != null && type.resolvedType != .DYNAMIC && value.resolvedType != .DYNAMIC && !neededTypeContext && (
          value.resolvedType == type.resolvedType || context == type.resolvedType && _cache.canImplicitlyConvert(value.resolvedType, type.resolvedType)) {
        _log.semanticWarningExtraCast(Range.span(range, type.range), value.resolvedType, type.resolvedType)
      }
    }

    def _resolveConstant(node Node, scope Scope, context Type) {
      switch node.content.kind {
        case .BOOL { node.resolvedType = _cache.boolType }
        case .DOUBLE { node.resolvedType = _cache.doubleType }
        case .STRING { node.resolvedType = _cache.stringType }

        # The literal "0" represents the empty set for "flags" types
        case .INT { node.resolvedType = context != null && context.isFlags && node.asInt == 0 ? context : _cache.intType }

        default { assert(false) }
      }
    }

    def _findMember(type Type, name string) Symbol {
      if type.kind == .SYMBOL {
        var symbol = type.symbol

        if symbol.kind.isObject {
          var member = symbol.asObjectSymbol.members.get(name, null)

          if member != null {
            _initializeSymbol(member)
            return member
          }
        }
      }

      return null
    }

    def _sinkNullDotIntoHook(node Node, scope Scope, context Type) Node {
      var nullDot = node

      # Search down the chain of dot accesses and calls for "?." expression
      while true {
        if nullDot.kind == .DOT && nullDot.dotTarget != null {
          nullDot = nullDot.dotTarget
        } else if nullDot.kind == .CALL {
          nullDot = nullDot.callValue
        } else {
          break
        }
      }

      # Stop if this isn't a "?." expression after all
      if nullDot.kind != .NULL_DOT {
        return null
      }

      # Wrap everything in a null check
      var target = nullDot.dotTarget.remove
      _resolveAsParameterizedExpression(target, scope)
      var test = Node.createBinary(.NOT_EQUAL, _extractExpression(target, scope), Node.createNull.withRange(nullDot.internalRange)).withRange(target.range)
      var dot = Node.createDot(target, nullDot.asString).withRange(nullDot.range).withInternalRange(nullDot.internalRange)
      var hook = Node.createHook(test, dot, Node.createNull.withRange(nullDot.internalRangeOrRange)).withRange(nullDot.range)
      nullDot.become(hook.hookTrue.clone)
      node.resolvedType = null # This is necessary to trigger the resolve below
      hook.hookTrue.become(node.cloneAndStealChildren)
      return hook
    }

    enum CompletionCheck {
      NORMAL
      INSTANCE_ONLY
      GLOBAL_ONLY
    }

    def _checkForMemberCompletions(type Type, range Range, name string, check CompletionCheck) {
      assert(type != null)
      var completionContext = _options.completionContext

      if completionContext != null && range != null && range.source == completionContext.source &&
          range.touches(completionContext.index) && type.kind == .SYMBOL && type.symbol.kind.isObject {
        var prefix = name.slice(0, completionContext.index - range.start)
        var object = type.symbol.asObjectSymbol

        _initializeSymbol(object)
        completionContext.range = range

        for member in object.members.values {
          var isOnInstances = member.kind.isOnInstances
          if (check == .INSTANCE_ONLY ? isOnInstances : check == .GLOBAL_ONLY ? !isOnInstances : true) && _matchCompletion(member, prefix) {
            _initializeSymbol(member)
            completionContext.addCompletion(member)
          }
        }
      }
    }

    def _checkForScopeCompletions(scope Scope, range Range, name string, thisObject ObjectSymbol) {
      var completionContext = _options.completionContext

      if completionContext != null && range != null && range.source == completionContext.source && range.touches(completionContext.index) {
        var prefix = name.slice(0, completionContext.index - range.start)

        completionContext.range = range

        while scope != null {
          switch scope.kind {
            case .OBJECT {
              var object = scope.asObjectScope.symbol
              for symbol in object.members.values {
                if _matchCompletion(symbol, prefix) && (!symbol.kind.isOnInstances || object == thisObject) {
                  _initializeSymbol(symbol)
                  completionContext.addCompletion(symbol)
                }
              }
            }

            case .FUNCTION {
              for symbol in scope.asFunctionScope.parameters.values {
                if _matchCompletion(symbol, prefix) {
                  _initializeSymbol(symbol)
                  completionContext.addCompletion(symbol)
                }
              }
            }

            case .LOCAL {
              for symbol in scope.asLocalScope.locals.values {
                if _matchCompletion(symbol, prefix) {
                  _initializeSymbol(symbol)
                  completionContext.addCompletion(symbol)
                }
              }
            }
          }

          scope = scope.parent
        }
      }
    }

    def _resolveDot(node Node, scope Scope, context Type) {
      var hook = _sinkNullDotIntoHook(node, scope, context)
      if hook != null {
        node.become(hook)
        _resolveAsParameterizedExpressionWithTypeContext(node, scope, context)
        return
      }

      var target = node.dotTarget
      var name = node.asString

      # Resolve the target if present
      if target != null {
        _resolveNode(target, scope, null)

        # Support IDE code completion
        _checkForMemberCompletions(target.resolvedType, node.internalRange, name, target.isType ? .GLOBAL_ONLY : .INSTANCE_ONLY)
      }

      # Ignore parse errors (the syntax tree is kept around for code completion)
      if name == "" {
        return
      }

      # Infer the target from the type context if it's omitted
      if target == null {
        if context == null {
          _log.semanticErrorMissingDotContext(node.range, name)
          return
        }
        target = Node.createType(context)
        node.appendChild(target)
        assert(node.dotTarget == target)

        # Support IDE code completion
        _checkForMemberCompletions(target.resolvedType, node.internalRange, name, target.isType ? .GLOBAL_ONLY : .INSTANCE_ONLY)
      }

      # Search for a setter first, then search for a normal member
      var symbol Symbol = null
      if _shouldCheckForSetter(node) {
        symbol = _findMember(target.resolvedType, name + "=")
      }
      if symbol == null {
        symbol = _findMember(target.resolvedType, name)
        if symbol == null {
          # Symbol lookup failure
          if target.resolvedType != .DYNAMIC {
            var type = target.resolvedType
            var correction = type.kind != .SYMBOL || !type.symbol.kind.isObject ? null :
              type.symbol.asObjectSymbol.scope.findWithFuzzyMatching(name, target.isType ? .GLOBAL_ONLY : .INSTANCE_ONLY, .SELF_ONLY)
            _reportGuardMergingFailure(node)
            _log.semanticErrorUnknownMemberSymbol(node.internalRangeOrRange, name, target.resolvedType, correction?.name, correction?.range)
          }

          # Dynamic symbol access
          else {
            # Make sure to warn when accessing a symbol at statement level without using it
            if node.parent != null && node.parent.kind == .EXPRESSION {
              _log.semanticWarningUnusedExpression(node.range)
            }

            # "dynamic.foo" => "foo"
            if target.kind == .TYPE {
              node.kind = .NAME
              node.removeChildren
            }

            # "Foo.new" => "Foo.new()"
            # "Foo.new()" => "Foo.new()"
            else if name == "new" && !_isCallValue(node) {
              node.become(Node.createCall(node.cloneAndStealChildren).withType(.DYNAMIC).withRange(node.range))
            }
          }

          return
        }
      }

      # Forbid referencing a base class global or constructor function from a derived class
      if _isBaseGlobalReference(target.resolvedType.symbol, symbol) {
        _log.semanticErrorUnknownMemberSymbol(node.range, name, target.resolvedType, symbol.fullName, symbol.range)
        return
      }

      var isType = target.isType
      var needsType = !symbol.kind.isOnInstances

      # Make sure the global/instance context matches the intended usage
      if isType {
        if !needsType {
          _log.semanticErrorMemberUnexpectedInstance(node.internalRangeOrRange, symbol.name)
        } else if symbol.kind.isFunctionOrOverloadedFunction {
          _checkIsParameterized(target)
        } else if target.resolvedType.isParameterized {
          _log.semanticErrorParameterizedType(target.range, target.resolvedType)
        }
      } else if needsType {
        _log.semanticErrorMemberUnexpectedGlobal(node.internalRangeOrRange, symbol.name)
      }

      # Always access referenced globals directly
      if !_options.stopAfterResolve && symbol.kind.isGlobalReference {
        node.kind = .NAME
        node.removeChildren
      }

      node.symbol = symbol
      node.resolvedType = _cache.substitute(symbol.resolvedType, target.resolvedType.environment)
      _automaticallyCallGetter(node, scope)
    }

    def _resolveHook(node Node, scope Scope, context Type) {
      _resolveAsParameterizedExpressionWithConversion(node.hookTest, scope, _cache.boolType)

      var trueValue = node.hookTrue
      var falseValue = node.hookFalse

      # Use the type context from the parent
      if context != null {
        _resolveAsParameterizedExpressionWithConversion(trueValue, scope, context)
        _resolveAsParameterizedExpressionWithConversion(falseValue, scope, context)
        node.resolvedType = context
      }

      # Find the common type from both branches
      else {
        _resolveAsParameterizedExpression(trueValue, scope)
        _resolveAsParameterizedExpression(falseValue, scope)
        var commonType = _cache.commonImplicitType(trueValue.resolvedType, falseValue.resolvedType)

        # Insert casts if needed since some targets can't perform this type inference
        if commonType != null {
          _checkConversion(trueValue, commonType, .IMPLICIT)
          _checkConversion(falseValue, commonType, .IMPLICIT)
          node.resolvedType = commonType
        } else {
          _log.semanticErrorNoCommonType(Range.span(trueValue.range, falseValue.range), trueValue.resolvedType, falseValue.resolvedType)
        }
      }

      # Check for likely bugs where both branches look the same
      if trueValue.looksTheSameAs(falseValue) {
        _log.semanticWarningIdenticalOperands(Range.span(trueValue.range, falseValue.range), node.wasNullJoin ? "??" : ":")
      }
    }

    def _resolveInitializer(node Node, scope Scope, context Type) {
      # Make sure to resolve the children even if the initializer is invalid
      if context != null {
        if context == .DYNAMIC || !_resolveInitializerWithContext(node, scope, context) {
          _resolveChildrenAsParameterizedExpressionsWithDynamicTypeContext(node, scope)
        }
        return
      }

      # First pass: only children with type context, second pass: all children
      for pass in 0..2 {
        switch node.kind {
          case .INITIALIZER_LIST {
            var type Type = null

            # Resolve all children for this pass
            for child = node.firstChild; child != null; child = child.nextSibling {
              if pass != 0 || !_needsTypeContext(child) {
                _resolveAsParameterizedExpression(child, scope)
                type = _mergeCommonType(type, child)
              }
            }

            # Resolve remaining children using the type context if valid
            if type != null && _isValidVariableType(type) {
              _resolveInitializerWithContext(node, scope, _cache.createListType(type))
              return
            }
          }

          case .INITIALIZER_MAP {
            var keyType Type = null
            var valueType Type = null

            # Resolve all children for this pass
            for child = node.firstChild; child != null; child = child.nextSibling {
              var key = child.firstValue
              var value = child.secondValue
              if pass != 0 || !_needsTypeContext(key) {
                _resolveAsParameterizedExpression(key, scope)
                keyType = _mergeCommonType(keyType, key)
              }
              if pass != 0 || !_needsTypeContext(value) {
                _resolveAsParameterizedExpression(value, scope)
                valueType = _mergeCommonType(valueType, value)
              }
            }

            # Resolve remaining children using the type context if valid
            if keyType != null && valueType != null && _isValidVariableType(valueType) {
              assert(!_cache.isEquivalentToInt(keyType) || !_cache.isEquivalentToString(keyType))
              if _cache.isEquivalentToInt(keyType) {
                _resolveInitializerWithContext(node, scope, _cache.createIntMapType(valueType))
                return
              }
              if _cache.isEquivalentToString(keyType) {
                _resolveInitializerWithContext(node, scope, _cache.createStringMapType(valueType))
                return
              }
            }
          }
        }
      }

      _log.semanticErrorInitializerTypeInferenceFailed(node.range)
      _resolveChildrenAsParameterizedExpressionsWithDynamicTypeContext(node, scope)
    }

    def _resolveInitializerWithContext(node Node, scope Scope, context Type) bool {
      var isList = node.kind == .INITIALIZER_LIST
      var new = _findMember(context, isList ? "[new]" : "{new}")
      var add = _findMember(context, isList ? "[...]" : "{...}")

      # Special-case imported literals to prevent an infinite loop for list literals
      if add != null && add.isImported {
        var function = add.asFunctionSymbol
        if function.arguments.count == (isList ? 1 : 2) {
          var functionType = _cache.substitute(function.resolvedType, context.environment)
          for child = node.firstChild; child != null; child = child.nextSibling {
            if child.kind == .PAIR {
              _resolveAsParameterizedExpressionWithConversion(child.firstValue, scope, functionType.argumentTypes[0])
              _resolveAsParameterizedExpressionWithConversion(child.secondValue, scope, functionType.argumentTypes[1])
              child.resolvedType = .DYNAMIC
            } else {
              _resolveAsParameterizedExpressionWithConversion(child, scope, functionType.argumentTypes[0])
            }
          }
          node.resolvedType = context
          return true
        }
      }

      # Use simple call chaining when there's an add operator present
      if add != null {
        var type = Node.createType(context).withRange(node.range).withFlags(.IS_IGNORED_BY_IDE)
        var chain = Node.createDot(type, new != null ? new.name : "new").withRange(node.range).withFlags(.IS_IGNORED_BY_IDE)
        while node.hasChildren {
          var child = node.firstChild.remove
          var dot = Node.createDot(chain, add.name).withRange(child.range).withFlags(.IS_IGNORED_BY_IDE)
          chain = Node.createCall(dot).withRange(child.range).withFlags(.IS_IGNORED_BY_IDE)
          if child.kind == .PAIR {
            chain.appendChildrenFrom(child)
          } else {
            chain.appendChild(child)
          }
        }
        node.become(chain)
        _resolveAsParameterizedExpressionWithConversion(node, scope, context)
        return true
      }

      # Make sure there's a constructor to call
      if new == null {
        # Avoid emitting an extra error when the constructor doesn't have the right type:
        #
        #   def main Foo {
        #     return []
        #   }
        #
        #   class Foo {
        #     def [new](x int) {}
        #   }
        #
        if !node.isInitializerExpansion {
          _log.semanticErrorInitializerTypeInferenceFailed(node.range)
        }
        return false
      }

      # Avoid infinite expansion
      if node.isInitializerExpansion {
        _log.semanticErrorInitializerRecursiveExpansion(node.range, new.range)
        return false
      }

      var dot = Node.createDot(Node.createType(context).withRange(node.range), new.name).withRange(node.range)

      # Call the initializer constructor
      if node.kind == .INITIALIZER_MAP {
        var firstValues = Node.createList.withFlags(.IS_INITIALIZER_EXPANSION).withRange(node.range)
        var secondValues = Node.createList.withFlags(.IS_INITIALIZER_EXPANSION).withRange(node.range)
        for child = node.firstChild; child != null; child = child.nextSibling {
          var first = child.firstValue
          var second = child.secondValue
          firstValues.appendChild(first.remove)
          secondValues.appendChild(second.remove)
        }
        node.become(Node.createCall(dot).withRange(node.range).appendChild(firstValues).appendChild(secondValues))
      } else {
        var values = Node.createList.withFlags(.IS_INITIALIZER_EXPANSION).withRange(node.range)
        node.become(Node.createCall(dot).withRange(node.range).appendChild(values.appendChildrenFrom(node)))
      }
      _resolveAsParameterizedExpressionWithConversion(node, scope, context)
      return true
    }

    def _mergeCommonType(commonType Type, child Node) Type {
      if commonType == null || child.resolvedType == .DYNAMIC {
        return child.resolvedType
      }

      var result = _cache.commonImplicitType(commonType, child.resolvedType)
      if result != null {
        return result
      }

      _log.semanticErrorNoCommonType(child.range, commonType, child.resolvedType)
      return .DYNAMIC
    }

    def _resolveLambda(node Node, scope Scope, context Type) {
      var symbol = node.symbol.asFunctionSymbol
      symbol.scope = FunctionScope.new(scope, symbol)

      # Use type context to implicitly set missing types
      if context != null && context.kind == .LAMBDA {

        # Copy over the argument types if they line up
        if context.argumentTypes.count == symbol.arguments.count {
          for i in 0..symbol.arguments.count {
            symbol.arguments[i].type ?= Node.createType(context.argumentTypes[i])
          }
        }

        # Copy over the return type
        if symbol.returnType == null && context.returnType != null {
          symbol.returnType = Node.createType(context.returnType)
        }
      }

      else {
        # Only infer non-void return types if there's no type context
        if symbol.returnType == null {
          symbol.flags |= .SHOULD_INFER_RETURN_TYPE
        }

        # If there's dynamic type context, treat all arguments as dynamic
        if context == .DYNAMIC {
          for argument in symbol.arguments {
            argument.type ?= Node.createType(.DYNAMIC)
          }
          symbol.returnType ?= Node.createType(.DYNAMIC)
          symbol.flags |= .IS_DYNAMIC_LAMBDA
        }
      }

      _resolveFunction(symbol)

      # Use a LambdaType instead of a SymbolType for the node
      var argumentTypes List<Type> = []
      var returnType = symbol.returnType
      for argument in symbol.arguments {
        argumentTypes.append(argument.resolvedType)
      }
      node.resolvedType = _cache.createLambdaType(argumentTypes, returnType?.resolvedType)
    }

    def _resolveLambdaType(node Node, scope Scope) {
      var lambdaReturnType = node.lambdaReturnType
      var argumentTypes List<Type> = []
      var returnType Type = null

      for child = node.firstChild; child != lambdaReturnType; child = child.nextSibling {
        _resolveAsParameterizedType(child, scope)
        argumentTypes.append(child.resolvedType)
      }

      # An empty return type is signaled by the type "null"
      if lambdaReturnType.kind != .TYPE || lambdaReturnType.resolvedType != .NULL {
        _resolveAsParameterizedType(lambdaReturnType, scope)
        returnType = lambdaReturnType.resolvedType
      }

      node.resolvedType = _cache.createLambdaType(argumentTypes, returnType)
    }

    def _resolveName(node Node, scope Scope) {
      var enclosingFunction = scope.findEnclosingFunction
      var thisVariable = enclosingFunction?.symbol.this
      var name = node.asString

      # Support IDE code completion
      _checkForScopeCompletions(scope, node.range, name, thisVariable != null ? enclosingFunction.symbol.parent.asObjectSymbol : null)
      if thisVariable != null {
        _checkForMemberCompletions(thisVariable.resolvedType, node.range, name, .NORMAL)
      }

      var symbol = scope.find(name, _shouldCheckForSetter(node) ? .ALSO_CHECK_FOR_SETTER : .NORMAL)

      if symbol == null {
        _reportGuardMergingFailure(node)

        if name == "this" && thisVariable != null {
          _log.semanticErrorUndeclaredSelfSymbol(node.range, name)
        }

        else {
          var correction = scope.findWithFuzzyMatching(name, node.shouldExpectType ? .TYPE_ONLY : thisVariable != null ? .EVERYTHING : .GLOBAL_ONLY, .SELF_AND_PARENTS)
          _log.semanticErrorUndeclaredSymbol(node.range, name, correction == null ? null : enclosingFunction != null &&
            _isBaseGlobalReference(enclosingFunction.symbol.parent, correction) ? correction.fullName : correction.name, correction?.range)
        }
        return
      }

      _initializeSymbol(symbol)

      # Track reads and writes of local variables for later use
      if node.isAssignTarget {
        _recordStatistic(symbol, .WRITE)

        # Also track reads for assignments
        if _isExpressionUsed(node.parent) {
          _recordStatistic(symbol, .READ)
        }
      } else {
        _recordStatistic(symbol, .READ)
      }

      # Forbid referencing a base class global or constructor function from a derived class
      if enclosingFunction != null && _isBaseGlobalReference(enclosingFunction.symbol.parent, symbol) {
        _log.semanticErrorUndeclaredSymbol(node.range, name, symbol.fullName, symbol.range)
        return
      }

      # Automatically insert "self." before instance symbols
      var resolvedType = symbol.resolvedType
      if symbol.kind.isOnInstances {
        if thisVariable != null && enclosingFunction.symbol.parent.asObjectSymbol.isSameOrHasBaseClass(symbol.parent) {
          node.become(Node.createDot(Node.createSymbolReference(thisVariable), name).withRange(node.range).withInternalRange(node.range))
          resolvedType = _cache.substitute(resolvedType, thisVariable.resolvedType.environment)
        } else {
          _log.semanticErrorMemberUnexpectedInstance(node.range, symbol.name)
        }
      }

      # Type parameters for objects may only be used in certain circumstances
      else if symbol.kind == .PARAMETER_OBJECT {
        var parent = scope
        var isValid = false

        while parent != null {
          switch parent.kind {
            case .OBJECT {
              isValid = parent.asObjectScope.symbol == symbol.parent
              break
            }

            case .FUNCTION {
              var function = parent.asFunctionScope.symbol
              if function.kind != .FUNCTION_LOCAL {
                isValid = function.parent == symbol.parent
                break
              }
            }

            case .VARIABLE {
              var variable = parent.asVariableScope.symbol
              isValid = variable.kind == .VARIABLE_INSTANCE && variable.parent == symbol.parent
              break
            }
          }

          parent = parent.parent
        }

        if !isValid {
          _log.semanticErrorMemberUnexpectedTypeParameter(node.range, symbol.name)
        }
      }

      node.symbol = symbol
      node.resolvedType = resolvedType
      _automaticallyCallGetter(node, scope)
    }

    def _resolveNullDot(node Node, scope Scope) {
      node.become(_sinkNullDotIntoHook(node, scope, null))
      _resolveAsParameterizedExpression(node, scope)
    }

    def _resolveParameterize(node Node, scope Scope) {
      var value = node.parameterizeValue
      _resolveNode(value, scope, null)

      # Resolve parameter types
      var substitutions List<Type> = []
      var count = 0
      for child = value.nextSibling; child != null; child = child.nextSibling {
        _resolveAsParameterizedType(child, scope)
        substitutions.append(child.resolvedType)
        count++
      }

      var type = value.resolvedType
      var parameters = type.parameters

      # If this is an overloaded symbol, try to pick an overload just using the parameter count
      if parameters == null && type.kind == .SYMBOL && type.symbol.kind.isOverloadedFunction {
        var match FunctionSymbol = null
        for candidate in type.symbol.asOverloadedFunctionSymbol.symbols {
          if candidate.parameters != null && candidate.parameters.count == count {
            if match != null {
              match = null
              break
            }
            match = candidate
          }
        }
        if match != null {
          type = _cache.substitute(match.resolvedType, type.environment)
          parameters = type.parameters
        }
      }

      # Check for type parameters
      if parameters == null || type.isParameterized {
        if type != .DYNAMIC {
          _log.semanticErrorCannotParameterize(node.range, type)
        }
        value.resolvedType = .DYNAMIC
        return
      }

      # Check parameter count
      var expected = parameters.count
      if count != expected {
        _log.semanticErrorParameterCount(node.internalRangeOrRange, expected, count)
        value.resolvedType = .DYNAMIC
        return
      }

      # Make sure all parameters have types
      for parameter in parameters {
        _initializeSymbol(parameter)
      }

      # Include the symbol for use with Node.isType
      node.resolvedType = _cache.substitute(type, _cache.mergeEnvironments(type.environment, _cache.createEnvironment(parameters, substitutions), null))
      node.symbol = value.symbol
    }

    def _resolveSequence(node Node, scope Scope, context Type) {
      for child = node.firstChild; child != null; child = child.nextSibling {
        _resolveAsParameterizedExpressionWithTypeContext(child, scope, child.nextSibling == null ? context : null)
      }

      if node.hasChildren {
        node.resolvedType = node.lastChild.resolvedType
      }
    }

    def _resolveStringInterpolation(node Node, scope Scope) {
      assert(node.childCount % 2 == 1)
      _resolveChildrenAsParameterizedExpressions(node, scope)

      # TypeScript supports string interpolation natively
      if _options.target is TypeScriptTarget {
        for child = node.firstChild; child != null; child = child.nextSibling {
          if child.resolvedType != .DYNAMIC && child.resolvedType != _cache.stringType {
            var temp = Node.createNull
            child.replaceWith(temp)
            child = Node.createDot(child, "toString").withRange(child.range).withFlags(.IS_IGNORED_BY_IDE)
            temp.replaceWith(child)
          }
          _resolveAsParameterizedExpressionWithConversion(child, scope, _cache.stringType)
        }
        node.resolvedType = _cache.stringType
        return
      }

      # Convert the string interpolation into a series of string concatenations
      var joined Node = null
      while node.hasChildren {
        var child = node.firstChild.remove
        if child.isString && child.asString == "" {
          continue
        } else if child.resolvedType != .DYNAMIC && child.resolvedType != _cache.stringType {
          child = Node.createDot(child, "toString").withRange(child.range).withFlags(.IS_IGNORED_BY_IDE)
          _resolveAsParameterizedExpressionWithConversion(child, scope, _cache.stringType)
        }
        joined = joined != null ? Node.createBinary(.ADD, joined, child).withRange(Range.span(joined.range, child.range)).withFlags(.IS_IGNORED_BY_IDE) : child
        _resolveAsParameterizedExpressionWithConversion(joined, scope, _cache.stringType)
      }
      node.become(joined != null ? joined : Node.createString(""))
      _resolveAsParameterizedExpressionWithConversion(node, scope, _cache.stringType)
    }

    def _resolveSuper(node Node, scope Scope) {
      var function = scope.findEnclosingFunction
      var symbol = function?.symbol
      var baseType = symbol?.parent.asObjectSymbol.baseType
      var overridden = baseType == null ? null : _findMember(baseType, symbol.name)

      if overridden == null {
        _log.semanticErrorBadSuper(node.range)
        return
      }

      # Calling a static method doesn't need special handling
      if overridden.kind == .FUNCTION_GLOBAL {
        node.kind = .NAME
      }

      node.resolvedType = overridden.resolvedType
      node.symbol = overridden
      _automaticallyCallGetter(node, scope)
    }

    def _resolveTypeCheck(node Node, scope Scope) {
      var value = node.typeCheckValue
      var type = node.typeCheckType

      _resolveAsParameterizedExpression(value, scope)
      _resolveAsParameterizedType(type, scope)
      _checkConversion(value, type.resolvedType, .EXPLICIT)
      node.resolvedType = _cache.boolType

      # Type checks don't work against interfaces
      if type.resolvedType.isInterface {
        _log.semanticWarningBadTypeCheck(type.range, type.resolvedType)
      }

      # Warn about unnecessary type checks
      else if value.resolvedType != .DYNAMIC && _cache.canImplicitlyConvert(value.resolvedType, type.resolvedType) && (type.resolvedType != .DYNAMIC || type.kind == .TYPE) {
        _log.semanticWarningExtraTypeCheck(node.range, value.resolvedType, type.resolvedType)
      }
    }

    def _resolveXML(node Node, scope Scope) {
      var tag = node.xmlTag
      var attributes = node.xmlAttributes
      var children = node.xmlChildren
      var closingTag = node.xmlClosingTag?.remove
      var initialErrorCount = _log.errorCount
      _resolveAsParameterizedType(tag, scope)

      # Make sure there's a constructor to call
      if _findMember(tag.resolvedType, "new") == null {
        attributes.removeChildren
        children.removeChildren
        attributes.resolvedType = .DYNAMIC

        # Only report an error if there isn't one already
        if _log.errorCount == initialErrorCount {
          _log.semanticErrorXMLCannotConstruct(node.range, tag.resolvedType)
        }
        return
      }

      # Call the constructor
      var value = Node.createDot(tag.clone, "new").withRange(node.range).withFlags(.IS_IGNORED_BY_IDE)
      var needsSequence = attributes.hasChildren || children.hasChildren
      var result = value
      _resolveAsParameterizedExpression(value, scope)
      if needsSequence {
        result = Node.createSequence.withRange(node.range).appendChild(_extractExpression(value, scope).withFlags(.IS_IGNORED_BY_IDE))
      }

      # Assign to attributes if necessary
      while attributes.hasChildren {
        var child = attributes.firstChild.remove
        var name = child.binaryLeft
        while name.kind == .DOT {
          name = name.dotTarget
        }
        assert(name.kind == .NAME)
        name.replaceWith(Node.createDot(value.clone, name.asString).withRange(name.range))
        result.appendChild(child)
      }

      # Make sure there's an append function to call if needed
      if children.hasChildren && _findMember(tag.resolvedType, "<>...</>") == null {
        _log.semanticErrorXMLMissingAppend(children.firstChild.range, tag.resolvedType)
        children.removeChildren
      }

      # Append children
      else {
        # Don't need a closure if all children are expressions
        var isJustExpressions = true
        for child = children.firstChild; child != null; child = child.nextSibling {
          if child.kind != .EXPRESSION {
            isJustExpressions = false
            break
          }
        }

        # All expression statements get passed as arguments to "<>...</>"
        _recursivelyReplaceExpressionsInXML(children, value)

        # Add to the sequence
        if isJustExpressions {
          for child = children.firstChild; child != null; child = child.nextSibling {
            result.appendChild(child.expressionValue.remove)
          }
        }

        # Wrap in a closure
        else {
          var symbol = FunctionSymbol.new(.FUNCTION_LOCAL, "<lambda>")
          symbol.range = children.range
          symbol.block = children.remove
          result.appendChild(Node.createCall(Node.createLambda(symbol).withRange(symbol.range)).withRange(symbol.range))
        }
      }

      # Resolve the closing tag for IDE tooltips
      if closingTag != null {
        _resolveAsParameterizedType(closingTag, scope)
        value = Node.createCast(value, closingTag)
      }

      # Resolve the value
      node.become(needsSequence ? result.appendChild(value) : value)
      _resolveAsParameterizedExpression(node, scope)
    }

    def _recursivelyReplaceExpressionsInXML(node Node, reference Node) {
      assert(node.kind == .BLOCK)

      for child = node.firstChild; child != null; child = child.nextSibling {
        switch child.kind {
          case .EXPRESSION {
            child.appendChild(Node.createCall(Node.createDot(reference.clone, "<>...</>").withRange(child.range).withFlags(.IS_IGNORED_BY_IDE))
              .appendChild(child.expressionValue.remove).withRange(child.range))
          }

          case .FOR {
            _recursivelyReplaceExpressionsInXML(child.forBlock, reference)
          }

          case .FOREACH {
            _recursivelyReplaceExpressionsInXML(child.foreachBlock, reference)
          }

          case .IF {
            _recursivelyReplaceExpressionsInXML(child.ifTrue, reference)
            if child.ifFalse != null {
              _recursivelyReplaceExpressionsInXML(child.ifFalse, reference)
            }
          }

          case .SWITCH {
            for nested = child.switchValue.nextSibling; nested != null; nested = nested.nextSibling {
              _recursivelyReplaceExpressionsInXML(nested.caseBlock, reference)
            }
          }

          case .TRY {
            var tryBlock = child.tryBlock
            var finallyBlock = child.finallyBlock
            _recursivelyReplaceExpressionsInXML(tryBlock, reference)
            for nested = tryBlock.nextSibling; nested != finallyBlock; nested = nested.nextSibling {
              _recursivelyReplaceExpressionsInXML(nested.catchBlock, reference)
            }
            if finallyBlock != null {
              _recursivelyReplaceExpressionsInXML(finallyBlock, reference)
            }
          }

          case .WHILE {
            _recursivelyReplaceExpressionsInXML(child.whileBlock, reference)
          }
        }
      }
    }

    def _resolveBinary(node Node, scope Scope, context Type) {
      var kind = node.kind
      var left = node.binaryLeft
      var right = node.binaryRight

      # Special-case the "??" operator
      if kind == .NULL_JOIN {
        if _options.target.supportsNativeNullishCoalescing {
          _resolveAsParameterizedExpressionWithTypeContext(left, scope, context)
          _resolveAsParameterizedExpressionWithTypeContext(right, scope, context ?? left.resolvedType)
          node.resolvedType = _cache.commonImplicitType(left.resolvedType, right.resolvedType)
        } else {
          _resolveAsParameterizedExpressionWithTypeContext(left, scope, context)
          _resolveAsParameterizedExpressionWithTypeContext(right, scope, context ?? left.resolvedType)
          var test = Node.createBinary(.NOT_EQUAL, _extractExpressionForAssignment(left, scope), Node.createNull).withRange(left.range)
          node.become(Node.createHook(test, left.remove, right.remove).withRange(node.range).withFlags(.WAS_NULL_JOIN))
          _resolveAsParameterizedExpressionWithTypeContext(node, scope, context)
        }
        return
      }


      # Special-case the "?=" operator
      if kind == .ASSIGN_NULL {
        _resolveAsParameterizedExpressionWithTypeContext(left, scope, context)
        _checkStorage(left, scope)
        var test = Node.createBinary(.NOT_EQUAL, _extractExpressionForAssignment(left, scope), Node.createNull).withRange(left.range)
        var assign = Node.createBinary(.ASSIGN, left.remove, right.remove).withRange(node.range).withFlags(.WAS_ASSIGN_NULL)
        node.become(Node.createHook(test, left.clone, assign).withRange(node.range))
        _resolveAsParameterizedExpressionWithTypeContext(node, scope, context)
        return
      }

      # Special-case the equality operators
      if kind == .EQUAL || kind == .NOT_EQUAL {
        if _needsTypeContext(left) {
          _resolveAsParameterizedExpression(right, scope)
          _resolveAsParameterizedExpressionWithTypeContext(left, scope, right.resolvedType)
        } else if _needsTypeContext(right) {
          _resolveAsParameterizedExpression(left, scope)
          _resolveAsParameterizedExpressionWithTypeContext(right, scope, left.resolvedType)
        } else {
          _resolveAsParameterizedExpression(left, scope)
          _resolveAsParameterizedExpression(right, scope)
        }

        # Check for likely bugs "x == x" or "x != x", except when this is used to test for NaN
        if left.looksTheSameAs(right) && left.hasNoSideEffects && right.hasNoSideEffects &&
            !_cache.isEquivalentToDouble(left.resolvedType) && left.resolvedType != .DYNAMIC {
          _log.semanticWarningIdenticalOperands(node.range, kind == .EQUAL ? "==" : "!=")
        }

        # The two types must be compatible
        var commonType = _cache.commonImplicitType(left.resolvedType, right.resolvedType)
        if commonType == null {
          _log.semanticErrorNoCommonType(node.range, left.resolvedType, right.resolvedType)
        } else {
          node.resolvedType = _cache.boolType

          # Make sure type casts are inserted
          _checkConversion(left, commonType, .IMPLICIT)
          _checkConversion(right, commonType, .IMPLICIT)
        }

        return
      }

      # Special-case assignment since it's not overridable
      if kind == .ASSIGN {
        _resolveAsParameterizedExpression(left, scope)

        # Automatically call setters
        if left.symbol != null && left.symbol.isSetter {
          node.become(Node.createCall(left.remove).withRange(node.range).withInternalRange(right.range).appendChild(right.remove))
          _resolveAsParameterizedExpression(node, scope)
        }

        # Resolve the right side using type context from the left side
        else {
          _resolveAsParameterizedExpressionWithConversion(right, scope, left.resolvedType)
          node.resolvedType = left.resolvedType
          _checkStorage(left, scope)

          # Check for likely bugs "x = x"
          if left.looksTheSameAs(right) && left.hasNoSideEffects && right.hasNoSideEffects {
            _log.semanticWarningIdenticalOperands(node.range, node.wasAssignNull ? "?=" : "=")
          }

          # Check for likely bugs "x = y" instead of "x == y" based on type context
          else if node.internalRange != null && context != null && context != .DYNAMIC && left.resolvedType == .DYNAMIC &&
              right.resolvedType != .DYNAMIC && !_cache.canImplicitlyConvert(right.resolvedType, context) {
            _log.semanticWarningSuspiciousAssignmentLocation(node.internalRangeOrRange)
          }

          # Check for likely bugs "x = y" instead of "x == y" based on expression context
          else if node.internalRange != null && node.parent != null {
            var parent = node.parent
            var parentKind = parent.kind
            if parentKind == .IF || parentKind == .WHILE || parentKind == .LOGICAL_AND || parentKind == .LOGICAL_OR || parentKind == .NOT ||
                parentKind == .RETURN && !parent.isImplicitReturn || parentKind == .HOOK && node == parent.hookTest {
              _log.semanticWarningSuspiciousAssignmentLocation(node.internalRangeOrRange)
            }
          }
        }

        return
      }

      # Special-case short-circuit logical operators since they aren't overridable
      if kind == .LOGICAL_AND || kind == .LOGICAL_OR {
        _resolveAsParameterizedExpressionWithConversion(left, scope, _cache.boolType)
        _resolveAsParameterizedExpressionWithConversion(right, scope, _cache.boolType)
        node.resolvedType = _cache.boolType

        # Check for likely bugs "x && x" or "x || x"
        if left.looksTheSameAs(right) && left.hasNoSideEffects && right.hasNoSideEffects && (!left.isBool || !right.isBool) {
          _log.semanticWarningIdenticalOperands(node.range, kind == .LOGICAL_AND ? "&&" : "||")
        }
        return
      }

      _resolveOperatorOverload(node, scope, context)
    }

    def _generateReference(scope Scope, type Type) Node {
      var enclosingFunction = scope.findEnclosingFunctionOrLambda
      var symbol VariableSymbol = null

      # Add a local variable
      if enclosingFunction != null {
        var block = enclosingFunction.symbol.block

        # Make sure the call to "super" is still the first statement
        var after = block.firstChild
        if after.isSuperCallStatement {
          after = after.nextSibling
        }

        # Add the new variable to the top of the function
        symbol = VariableSymbol.new(.VARIABLE_LOCAL, enclosingFunction.generateName("ref"))
        block.insertChildBefore(after, Node.createVariables.appendChild(Node.createVariable(symbol)))
      }

      # Otherwise, add a global variable
      else {
        symbol = VariableSymbol.new(.VARIABLE_GLOBAL, _global.scope.generateName("ref"))
        symbol.parent = _global
        _generatedGlobalVariables.append(symbol)
      }

      # Force-initialize the symbol
      symbol.initializeWithType(type)
      return Node.createSymbolReference(symbol)
    }

    def _extractExpression(node Node, scope Scope) Node {
      assert(node.resolvedType != null)

      if node.kind == .NAME || node.kind == .CONSTANT {
        return node.clone
      }

      # Replace the original expression with a reference
      var reference = _generateReference(scope, node.resolvedType).withRange(node.range).withFlags(.IS_IGNORED_BY_IDE)
      var setup = node.cloneAndStealChildren
      node.become(reference)
      return Node.createBinary(.ASSIGN, reference, setup).withType(node.resolvedType).withRange(node.range)
    }

    # Expressions with side effects must be stored to temporary variables
    # if they need to be duplicated in an expression. This does the variable
    # allocation and storage and returns a partial assigment.
    #
    # Examples:
    #
    #    "a" stays "a" and returns "a"
    #    "a.b" stays "a.b" and returns "a.b"
    #    "a[0]" stays "a[0]" and returns "a[0]"
    #    "a().b" becomes "ref.b" and returns "(ref = a()).b"
    #    "a()[0]" becomes "ref[0]" and returns "(ref = a())[0]"
    #    "a()[b()]" becomes "ref[ref2]" and returns "(ref = a())[ref2 = b()]"
    #
    def _extractExpressionForAssignment(node Node, scope Scope) Node {
      assert(node.resolvedType != null)

      # Handle dot expressions
      if node.kind == .DOT && node.symbol != null {
        return Node.createDot(_extractExpression(node.dotTarget, scope), node.asString).withSymbol(node.symbol)
          .withType(node.resolvedType).withRange(node.range).withInternalRange(node.internalRange)
      }

      # Handle index expressions
      if node.kind == .INDEX {
        var left = _extractExpression(node.indexLeft, scope)
        return Node.createIndex(left, _extractExpression(node.indexRight, scope)).withRange(node.range)
      }

      # Handle name expressions
      if node.kind == .NAME {
        return node.clone
      }

      # Handle everything else
      return _extractExpression(node, scope)
    }

    def _resolveOperatorOverload(node Node, scope Scope, context Type) {
      # The order of operands are reversed for the "in" operator
      var kind = node.kind
      var reverseBinaryOrder = kind == .IN
      var first = node.firstChild
      var second = first.nextSibling
      var target = reverseBinaryOrder ? second : first
      var other = kind.isBinary ? reverseBinaryOrder ? first : second : null
      var isBitOperation = kind.isBitOperation
      var bitContext = isBitOperation && context != null && context.isFlags ? context : null

      # Allow "foo in [.FOO, .BAR]"
      if kind == .IN && target.kind == .INITIALIZER_LIST && !_needsTypeContext(other) {
        _resolveAsParameterizedExpression(other, scope)
        _resolveAsParameterizedExpressionWithTypeContext(target, scope, other.resolvedType != .DYNAMIC ? _cache.createListType(other.resolvedType) : null)
      }

      # Resolve just the target since the other arguments may need type context from overload resolution
      else {
        _resolveAsParameterizedExpressionWithTypeContext(target, scope, bitContext)
      }

      # Warn about shifting by 0 in the original source code, since that doesn't
      # do anything when the arguments are integers and so is likely a mistake
      if kind.isShift && _cache.isEquivalentToInt(target.resolvedType) && other.isInt && other.asInt == 0 {
        _log.semanticWarningShiftByZero(node.range)
      }

      # Can't do overload resolution on the dynamic type
      var type = target.resolvedType
      if type == .DYNAMIC {
        if kind.isAssign && kind != .ASSIGN_INDEX {
          _checkStorage(target, scope)
        }
        _resolveChildrenAsParameterizedExpressions(node, scope)
        return
      }

      # Check if the operator can be overridden at all
      var info = operatorInfo[kind]
      if info.kind != .OVERRIDABLE {
        _log.semanticErrorUnknownMemberSymbol(node.internalRangeOrRange, info.text, type, null, null)
        _resolveChildrenAsParameterizedExpressions(node, scope)
        return
      }

      # Numeric conversions
      var enumFlagsType Type = null

      # Binary operations
      if other != null {
        # Assignment operations aren't symmetric
        if !kind.isBinaryAssign {
          if type == _cache.intType {
            _resolveAsParameterizedExpression(other, scope)

            # Auto-convert doubles to ints
            if other.resolvedType == _cache.doubleType {
              _checkConversion(target, _cache.doubleType, .IMPLICIT)
              type = _cache.doubleType
            }
          }

          # Check if the target is an enum
          else if type.isEnumOrFlags {
            _resolveAsParameterizedExpressionWithTypeContext(other, scope, bitContext ?? ((isBitOperation || kind == .IN) && type.isFlags ? type : null))

            # Auto-convert enums to ints when both operands can be converted
            if _cache.isNumeric(other.resolvedType) {
              type = _cache.commonImplicitType(type, other.resolvedType)
              assert(type != null)
              if type.isEnumOrFlags {
                if type.isFlags {
                  enumFlagsType = type
                }
                type = _cache.intType
              }
              _checkConversion(target, type, .IMPLICIT)
              _checkConversion(other, type, .IMPLICIT)
            }
          }
        }

        # Allow certain operations on "flags" types
        else if isBitOperation && type.isFlags {
          _resolveAsParameterizedExpressionWithTypeContext(other, scope, type)
          enumFlagsType = type
          type = _cache.intType
          _checkConversion(other, type, .IMPLICIT)
        }
      }

      # Allow "~x" on "flags" types
      else if kind == .COMPLEMENT && type.isEnumOrFlags {
        if type.isFlags {
          enumFlagsType = type
        }
        type = _cache.intType
        _checkConversion(target, type, .IMPLICIT)
      }

      # Find the operator method
      var isComparison = kind.isBinaryComparison
      var name = isComparison ? "<=>" : info.text
      var symbol = _findMember(type, name)
      var extracted Node = null
      var wasUnaryPostfix = false

      # Convert operators like "+=" to a "+" inside a "="
      if symbol == null && info.assignKind != .NULL {
        symbol = _findMember(type, operatorInfo[info.assignKind].text)
        if symbol != null {
          extracted = _extractExpressionForAssignment(target, scope)
          if kind == .PREFIX_INCREMENT || kind == .PREFIX_DECREMENT || kind == .POSTFIX_INCREMENT || kind == .POSTFIX_DECREMENT {
            node.appendChild(_cache.createInt(1).withRange(node.internalRangeOrRange))
            node.internalRange = null # This no longer makes sense
          }
          wasUnaryPostfix = kind.isUnaryPostfix && _isExpressionUsed(node)
          kind = info.assignKind
          node.kind = kind
        }
      }

      # Special-case the "in" operator on "flags" types
      if symbol == null && kind == .IN && enumFlagsType != null {
        node.become(Node.createBinary(.NOT_EQUAL, Node.createBinary(.BITWISE_AND, other.remove, target.remove).withRange(node.range), _cache.createInt(0)).withRange(node.range))
        _resolveAsParameterizedExpression(node, scope)
        return
      }

      # Fail if the operator wasn't found
      if symbol == null {
        _log.semanticErrorUnknownMemberSymbol(node.internalRangeOrRange, name, type, null, null)
        _resolveChildrenAsParameterizedExpressions(node, scope)
        return
      }
      var symbolType = _cache.substitute(symbol.resolvedType, type.environment)

      # Resolve the overload now so the symbol's properties can be inspected
      if symbol.kind.isOverloadedFunction {
        if reverseBinaryOrder {
          first.swapWith(second)
        }
        symbolType = _resolveOverloadedFunction(node.internalRangeOrRange, node, scope, symbolType)
        if reverseBinaryOrder {
          first.swapWith(second)
        }
        if symbolType == null {
          _resolveChildrenAsParameterizedExpressions(node, scope)
          return
        }
        symbol = symbolType.symbol
      }

      var isRawImport = symbol.isImported && !symbol.isRenamed
      node.symbol = symbol
      _checkAccess(node, node.internalRangeOrRange, scope)

      # Check for a valid storage location for imported operators
      if kind.isAssign && kind != .ASSIGN_INDEX && symbol.isImported && extracted == null {
        _checkStorage(target, scope)
      }

      # "<", ">", "<=", or ">="
      if isComparison && (isRawImport || type == _cache.intType || type == _cache.doubleType) {
        _resolveChildrenAsParameterizedExpressions(node, scope)
        node.resolvedType = _cache.boolType
        node.symbol = null
      }

      # Don't replace the operator with a call if it's just used for type checking
      else if isRawImport {
        if reverseBinaryOrder {
          first.swapWith(second)
        }
        if !_resolveFunctionCall(node, scope, symbolType) {
          _resolveChildrenAsParameterizedExpressions(node, scope)
        }
        if reverseBinaryOrder {
          first.swapWith(second)
        }

        # Handle "flags" types
        if isBitOperation && enumFlagsType != null {
          node.resolvedType = enumFlagsType
        }
      }

      else {
        # Resolve the method call
        if reverseBinaryOrder {
          first.swapWith(second)
        }
        node.prependChild(Node.createMemberReference(target.remove, symbol).withRange(node.internalRangeOrRange))

        # Implement the logic for the "<=>" operator
        if isComparison {
          var call = Node.new(.CALL).appendChildrenFrom(node).withRange(node.range)
          node.appendChild(call)
          node.appendChild(_cache.createInt(0))
          node.resolvedType = _cache.boolType
          _resolveFunctionCall(call, scope, symbolType)
        }

        # All other operators are just normal method calls
        else {
          node.kind = .CALL
          _resolveFunctionCall(node, scope, symbolType)
        }
      }

      if extracted != null {
        # The expression used to initialize the assignment must return a value
        if symbolType.returnType == null {
          _log.semanticErrorUseOfVoidFunction(node.range, symbol.name, symbol.range)
        }

        # Wrap everything in an assignment if the assignment target was extracted
        _promoteToAssignment(node, extracted)
        _resolveAsParameterizedExpression(node, scope)

        # Handle custom unary postfix operators
        if wasUnaryPostfix {
          node.become(Node.createBinary(kind, node.cloneAndStealChildren,
            _cache.createInt(-1).withRange(node.internalRangeOrRange)).withRange(node.range))
          _resolveAsParameterizedExpression(node, scope)
        }
      }

      # Handle custom unary assignment operators
      else if kind.isUnaryAssign && !isRawImport {
        # "foo(x++)" => "foo((ref = x, x = ref.increment(), ref))"
        if kind.isUnaryPostfix && _isExpressionUsed(node) {
          var reference = _generateReference(scope, target.resolvedType).withRange(target.range)
          var original = _extractExpressionForAssignment(target, scope)
          target.replaceWith(reference)
          _promoteToAssignment(node, target)
          node.become(Node.createSequence
            .appendChild(Node.createBinary(.ASSIGN, reference.clone, original).withRange(node.range))
            .appendChild(node.cloneAndStealChildren)
            .appendChild(reference.clone)
            .withRange(node.range))
          _resolveAsParameterizedExpression(node, scope)
        }

        # "foo(++x)" => "foo(x = x.increment())"
        else {
          _promoteToAssignment(node, _extractExpressionForAssignment(target, scope))
          _resolveAsParameterizedExpression(node, scope)
        }
      }
    }

    def _promoteToAssignment(node Node, extracted Node) {
      assert(extracted.parent == null)

      if extracted.kind == .INDEX {
        extracted.kind = .ASSIGN_INDEX
        extracted.appendChild(node.cloneAndStealChildren)
        node.become(extracted)
      } else {
        node.become(Node.createBinary(.ASSIGN, extracted, node.cloneAndStealChildren).withRange(node.range))
      }
    }

    def _automaticallyCallGetter(node Node, scope Scope) bool {
      var symbol = node.symbol
      if symbol == null {
        return false
      }
      var kind = symbol.kind
      var parent = node.parent

      # Never call a getter if type parameters are present
      if parent != null && parent.kind == .PARAMETERIZE && _isCallValue(parent) {
        return false
      }

      # The check for getters is complicated by overloaded functions
      if !symbol.isGetter && kind.isOverloadedFunction && (!_isCallValue(node) || parent.hasOneChild) {
        var overloaded = symbol.asOverloadedFunctionSymbol
        for getter in overloaded.symbols {

          # Just return the first getter assuming errors for duplicate getters
          # were already logged when the overloaded symbol was initialized
          if getter.isGetter {
            node.resolvedType = _cache.substitute(getter.resolvedType, node.resolvedType.environment)
            node.symbol = getter
            symbol = getter
            break
          }
        }
      }

      _checkAccess(node, node.internalRangeOrRange, scope)

      # Automatically wrap the getter in a call expression
      if symbol.isGetter {
        node.become(Node.createCall(node.cloneAndStealChildren).withRange(node.range))
        _resolveAsParameterizedExpression(node, scope)
        return true
      }

      # Forbid bare function references
      if !symbol.isSetter && node.resolvedType != .DYNAMIC && kind.isFunctionOrOverloadedFunction && kind != .FUNCTION_ANNOTATION &&
          !_isCallValue(node) && (parent == null || parent.kind != .PARAMETERIZE || !_isCallValue(parent)) {
        var lower = 0x7FFFFFFF
        var upper = -1
        if kind.isFunction {
          lower = upper = symbol.asFunctionSymbol.arguments.count
        } else {
          for function in symbol.asOverloadedFunctionSymbol.symbols {
            var count = function.arguments.count
            if count < lower { lower = count }
            if count > upper { upper = count }
          }
        }
        _log.semanticErrorMustCallFunction(node.internalRangeOrRange, symbol.name, lower, upper)
        node.resolvedType = .DYNAMIC
      }

      return false
    }

    def _convertSwitchToIfChain(node Node, scope Scope) {
      var variable = VariableSymbol.new(.VARIABLE_LOCAL, scope.generateName("value"))
      var value = node.switchValue.remove
      var block Node = null

      # Stash the variable being switched over so it's only evaluated once
      variable.initializeWithType(value.resolvedType)
      variable.value = value
      node.parent.insertChildBefore(node, Node.createVariables.appendChild(Node.createVariable(variable)))

      # Build the chain in reverse starting with the last case
      for child = node.lastChild; child != null; child = child.previousSibling {
        var caseBlock = child.caseBlock.remove
        var test Node = null

        # Combine adjacent cases in a "||" chain
        while child.hasChildren {
          var caseValue = Node.createBinary(.EQUAL, Node.createSymbolReference(variable), child.firstChild.remove).withType(_cache.boolType)
          test = test != null ? Node.createBinary(.LOGICAL_OR, test, caseValue).withType(_cache.boolType) : caseValue
        }

        # Chain if-else statements together
        block = test != null ? Node.createBlock.appendChild(Node.createIf(test, caseBlock, block)) : caseBlock
      }

      # Replace the switch statement with the if chain
      if block != null {
        node.replaceWithChildrenFrom(block)
      } else {
        node.remove
      }
    }
  }

  namespace Resolver {
    const _annotationSymbolFlags StringMap<SymbolFlags> = {
      "@alwaysinline": .IS_INLINING_FORCED,
      "@deprecated": .IS_DEPRECATED,
      "@entry": .IS_ENTRY_POINT,
      "@export": .IS_EXPORTED,
      "@import": .IS_IMPORTED,
      "@neverinline": .IS_INLINING_PREVENTED,
      "@prefer": .IS_PREFERRED,
      "@rename": .IS_RENAMED,
      "@skip": .IS_SKIPPED,
      "@spreads": .SHOULD_SPREAD,
      "@keepnames": .SHOULD_KEEPNAMES,
      "@global": .IS_GLOBAL
    }

    def _shouldCheckForSetter(node Node) bool {
      return node.parent != null && node.parent.kind == .ASSIGN && node == node.parent.binaryLeft
    }

    def _isExpressionUsed(node Node) bool {
      # Check for a null parent to handle variable initializers
      var parent = node.parent
      return parent == null || parent.kind != .EXPRESSION && !parent.isImplicitReturn &&
        (parent.kind != .ANNOTATION || node != parent.annotationValue) &&
        (parent.kind != .FOR || node != parent.forUpdate) &&
        parent.kind != .SEQUENCE
    }

    def _isValidVariableType(type Type) bool {
      return type != .NULL && (type.kind != .SYMBOL || !type.symbol.kind.isFunctionOrOverloadedFunction)
    }

    def _isBaseGlobalReference(parent Symbol, member Symbol) bool {
      return parent != null && parent.kind == .OBJECT_CLASS && member.kind.isGlobalReference && member.parent != parent &&
        member.parent.kind == .OBJECT_CLASS && parent.asObjectSymbol.hasBaseClass(member.parent)
    }

    def _isCallValue(node Node) bool {
      var parent = node.parent
      return parent != null && parent.kind == .CALL && node == parent.callValue
    }

    def _isCallReturningVoid(node Node) bool {
      return node.kind == .CALL && (
        node.symbol != null && node.symbol.resolvedType.returnType == null ||
        node.callValue.resolvedType.kind == .LAMBDA && node.callValue.resolvedType.returnType == null)
    }

    def _needsTypeContext(node Node) bool {
      return
        node.kind == .DOT && node.dotTarget == null ||
        node.kind == .HOOK && _needsTypeContext(node.hookTrue) && _needsTypeContext(node.hookFalse) ||
        node.kind.isInitializer
    }

    def _ensureFunctionIsOverloaded(symbol FunctionSymbol) {
      if symbol.overloaded == null {
        var overloaded = OverloadedFunctionSymbol.new(Merging.overloadedKind(symbol.kind), symbol.name, [symbol])
        overloaded.parent = symbol.parent
        overloaded.scope = overloaded.parent.scope
        symbol.overloaded = overloaded
      }
    }

    def _matchCompletion(symbol Symbol, prefix string) bool {
      if symbol.state == .INITIALIZING {
        return false
      }
      var name = symbol.name.toLowerCase
      if name[0] == '_' && prefix[0] != '_' {
        name = name.slice(1)
      }
      return name.startsWith(prefix.toLowerCase)
    }
  }
}
