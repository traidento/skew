namespace Skew {
  const NATIVE_LIBRARY_JS = "
const __create fn(dynamic) dynamic = dynamic.Object.create ? dynamic.Object.create : prototype => {
  return {\"__proto__\": prototype}
}

const __extends = (derived dynamic, base dynamic) => {
  derived.prototype = __create(base.prototype)
  derived.prototype.constructor = derived
}

const __imul fn(int, int) int = dynamic.Math.imul ? dynamic.Math.imul : (a, b) => {
  return ((a as dynamic) * (b >>> 16) << 16) + (a as dynamic) * (b & 65535) | 0
}

const __prototype dynamic
const __isInt = (value dynamic) => value == (value | 0)
const __isBool = (value dynamic) => value == !!value
const __isDouble = (value dynamic) => dynamic.typeof(value) == \"number\"
const __isString = (value dynamic) => dynamic.typeof(value) == \"string\"
const __asString = (value dynamic) => value == null ? value : value + \"\"

def assert(truth bool) {
  if !truth {
    throw dynamic.Error(\"Assertion failed\")
  }
}

# Override this to true to remove asserts from many of the functions below so that they may be inlined
const JS_INLINE_NATIVE = false

@import
namespace Math {}

@rename(\"boolean\")
class bool {}

@rename(\"number\")
class int {}

@rename(\"number\")
class double {
  @alwaysinline
  def isFinite bool {
    return dynamic.isFinite(self)
  }

  @alwaysinline
  def isNaN bool {
    return dynamic.isNaN(self)
  }
}

class string {
  def <=>(x string) int {
    return ((x as dynamic < self) as int) - ((x as dynamic > self) as int)
  }

  if JS_INLINE_NATIVE {
    @alwaysinline
    def slice(start int) string {
      return (self as dynamic).slice(start)
    }
  } else {
    def slice(start int) string {
      assert(0 <= start && start <= count)
      return (self as dynamic).slice(start)
    }
  }

  if JS_INLINE_NATIVE {
    @alwaysinline
    def slice(start int, end int) string {
      return (self as dynamic).slice(start, end)
    }
  } else {
    def slice(start int, end int) string {
      assert(0 <= start && start <= end && end <= count)
      return (self as dynamic).slice(start, end)
    }
  }

  @alwaysinline
  def startsWith(text string) bool {
    return (self as dynamic).startsWith(text)
  }

  @alwaysinline
  def endsWith(text string) bool {
    return (self as dynamic).endsWith(text)
  }

  @alwaysinline
  def replaceAll(before string, after string) string {
    return after.join(self.split(before))
  }

  @alwaysinline
  def in(value string) bool {
    return indexOf(value) != -1
  }

  @alwaysinline
  def count int {
    return (self as dynamic).length
  }

  if JS_INLINE_NATIVE {
    @alwaysinline
    def [](index int) int {
      return (self as dynamic).charCodeAt(index)
    }
  } else {
    def [](index int) int {
      assert(0 <= index && index < count)
      return (self as dynamic).charCodeAt(index)
    }
  }

  if JS_INLINE_NATIVE {
    @alwaysinline
    def get(index int) string {
      return (self as dynamic)[index]
    }
  } else {
    def get(index int) string {
      assert(0 <= index && index < count)
      return (self as dynamic)[index]
    }
  }

  def repeat(times int) string {
    var result = \"\"
    for i in 0..times {
      result += self
    }
    return result
  }

  @alwaysinline
  def join(parts List<string>) string {
    return (parts as dynamic).join(self)
  }

  def codeUnits List<int> {
    var result List<int> = []
    for i in 0..count {
      result.append(self[i])
    }
    return result
  }
}

namespace string {
  @alwaysinline
  def fromCodeUnit(codeUnit int) string {
    return dynamic.String.fromCharCode(codeUnit)
  }

  def fromCodeUnits(codeUnits List<int>) string {
    var result = \"\"
    for codeUnit in codeUnits {
      result += string.fromCodeUnit(codeUnit)
    }
    return result
  }
}

class StringBuilder {
  var buffer = \"\"

  def new {
  }

  @alwaysinline
  def append(x string) {
    buffer += x
  }

  @alwaysinline
  def toString string {
    return buffer
  }
}

@rename(\"Array\")
class List {
  @rename(\"unshift\")
  def prepend(x T)

  @rename(\"push\")
  def append(x T)

  @rename(\"every\")
  def all(x fn(T) bool) bool

  @rename(\"some\")
  def any(x fn(T) bool) bool

  @rename(\"slice\")
  def clone List<T>

  @rename(\"forEach\")
  def each(x fn(T))

  if JS_INLINE_NATIVE {
    @alwaysinline
    def slice(start int) List<T> {
      return (self as dynamic).slice(start)
    }
  } else {
    def slice(start int) List<T> {
      assert(0 <= start && start <= count)
      return (self as dynamic).slice(start)
    }
  }

  if JS_INLINE_NATIVE {
    @alwaysinline
    def slice(start int, end int) List<T> {
      return (self as dynamic).slice(start, end)
    }
  } else {
    def slice(start int, end int) List<T> {
      assert(0 <= start && start <= end && end <= count)
      return (self as dynamic).slice(start, end)
    }
  }

  if JS_INLINE_NATIVE {
    @alwaysinline
    def [](index int) T {
      return (self as dynamic)[index]
    }
  } else {
    def [](index int) T {
      assert(0 <= index && index < count)
      return (self as dynamic)[index]
    }
  }

  if JS_INLINE_NATIVE {
    @alwaysinline
    def []=(index int, value T) T {
      return (self as dynamic)[index] = value
    }
  } else {
    def []=(index int, value T) T {
      assert(0 <= index && index < count)
      return (self as dynamic)[index] = value
    }
  }

  @alwaysinline
  def in(value T) bool {
    return indexOf(value) != -1
  }

  @alwaysinline
  def isEmpty bool {
    return count == 0
  }

  @alwaysinline
  def count int {
    return (self as dynamic).length
  }

  if JS_INLINE_NATIVE {
    @alwaysinline
    def first T {
      return self[0]
    }
  } else {
    def first T {
      assert(!isEmpty)
      return self[0]
    }
  }

  def last T {
    assert(!isEmpty)
    return self[count - 1]
  }

  def prepend(values List<T>) {
    assert(values != self)
    var count = values.count
    for i in 0..count {
      prepend(values[count - i - 1])
    }
  }

  def append(values List<T>) {
    assert(values != self)
    for value in values {
      append(value)
    }
  }

  def insert(index int, values List<T>) {
    assert(values != self)
    for value in values {
      insert(index, value)
      index++
    }
  }

  if JS_INLINE_NATIVE {
    @alwaysinline
    def insert(index int, value T) {
      (self as dynamic).splice(index, 0, value)
    }
  } else {
    def insert(index int, value T) {
      assert(0 <= index && index <= count)
      (self as dynamic).splice(index, 0, value)
    }
  }

  def removeFirst {
    assert(!isEmpty)
    (self as dynamic).shift()
  }

  if JS_INLINE_NATIVE {
    @alwaysinline
    def takeFirst T {
      return (self as dynamic).shift()
    }
  } else {
    def takeFirst T {
      assert(!isEmpty)
      return (self as dynamic).shift()
    }
  }

  if JS_INLINE_NATIVE {
    @alwaysinline
    def removeLast {
      (self as dynamic).pop()
    }
  } else {
    def removeLast {
      assert(!isEmpty)
      (self as dynamic).pop()
    }
  }

  if JS_INLINE_NATIVE {
    @alwaysinline
    def takeLast T {
      return (self as dynamic).pop()
    }
  } else {
    def takeLast T {
      assert(!isEmpty)
      return (self as dynamic).pop()
    }
  }

  if JS_INLINE_NATIVE {
    @alwaysinline
    def removeAt(index int) {
      (self as dynamic).splice(index, 1)
    }
  } else {
    def removeAt(index int) {
      assert(0 <= index && index < count)
      (self as dynamic).splice(index, 1)
    }
  }

  if JS_INLINE_NATIVE {
    @alwaysinline
    def takeAt(index int) T {
      return (self as dynamic).splice(index, 1)[0]
    }
  } else {
    def takeAt(index int) T {
      assert(0 <= index && index < count)
      return (self as dynamic).splice(index, 1)[0]
    }
  }

  def takeRange(start int, end int) List<T> {
    assert(0 <= start && start <= end && end <= count)
    return (self as dynamic).splice(start, end - start)
  }

  def appendOne(value T) {
    if !(value in self) {
      append(value)
    }
  }

  def removeOne(value T) {
    var index = indexOf(value)
    if index >= 0 {
      removeAt(index)
    }
  }

  def removeRange(start int, end int) {
    assert(0 <= start && start <= end && end <= count)
    (self as dynamic).splice(start, end - start)
  }

  def removeIf(callback fn(T) bool) {
    var index = 0

    # Remove elements in place
    for i in 0..count {
      if !callback(self[i]) {
        if index < i {
          self[index] = self[i]
        }
        index++
      }
    }

    # Shrink the array to the correct size
    while index < count {
      removeLast
    }
  }

  def equals(other List<T>) bool {
    if count != other.count {
      return false
    }
    for i in 0..count {
      if self[i] != other[i] {
        return false
      }
    }
    return true
  }
}

namespace List {
  @alwaysinline
  def new List<T> {
    return [] as dynamic
  }
}

namespace StringMap {
  @alwaysinline
  def new StringMap<T> {
    return dynamic.Map.new
  }
}

class StringMap {
  if JS_INLINE_NATIVE {
    @alwaysinline
    def [](key string) T {
      return (self as dynamic).get(key)
    }
  } else {
    def [](key string) T {
      assert(key in self)
      return (self as dynamic).get(key)
    }
  }

  def []=(key string, value T) T {
    (self as dynamic).set(key, value)
    return value
  }

  def {...}(key string, value T) StringMap<T> {
    (self as dynamic).set(key, value)
    return self
  }

  @alwaysinline
  def in(key string) bool {
    return (self as dynamic).has(key)
  }

  @alwaysinline
  def count int {
    return (self as dynamic).size
  }

  @alwaysinline
  def isEmpty bool {
    return count == 0
  }

  def get(key string, defaultValue T) T {
    const value = (self as dynamic).get(key)
    return value != dynamic.void(0) ? value : defaultValue # Compare against undefined so the key is only hashed once for speed
  }

  @alwaysinline
  def keys List<string> {
    return dynamic.Array.from((self as dynamic).keys())
  }

  @alwaysinline
  def values List<T> {
    return dynamic.Array.from((self as dynamic).values())
  }

  @alwaysinline
  def clone StringMap<T> {
    return dynamic.Map.new(self)
  }

  @alwaysinline
  def remove(key string) {
    (self as dynamic).delete(key)
  }

  def each(x fn(string, T)) {
    (self as dynamic).forEach((value, key) => {
      x(key, value)
    })
  }
}

namespace IntMap {
  @alwaysinline
  def new IntMap<T> {
    return dynamic.Map.new
  }
}

class IntMap {
  if JS_INLINE_NATIVE {
    @alwaysinline
    def [](key int) T {
      return (self as dynamic).get(key)
    }
  } else {
    def [](key int) T {
      assert(key in self)
      return (self as dynamic).get(key)
    }
  }

  def []=(key int, value T) T {
    (self as dynamic).set(key, value)
    return value
  }

  def {...}(key int, value T) IntMap<T> {
    (self as dynamic).set(key, value)
    return self
  }

  @alwaysinline
  def in(key int) bool {
    return (self as dynamic).has(key)
  }

  @alwaysinline
  def count int {
    return (self as dynamic).size
  }

  @alwaysinline
  def isEmpty bool {
    return count == 0
  }

  def get(key int, defaultValue T) T {
    const value = (self as dynamic).get(key)
    return value != dynamic.void(0) ? value : defaultValue # Compare against undefined so the key is only hashed once for speed
  }

  @alwaysinline
  def keys List<int> {
    return dynamic.Array.from((self as dynamic).keys())
  }

  @alwaysinline
  def values List<T> {
    return dynamic.Array.from((self as dynamic).values())
  }

  @alwaysinline
  def clone IntMap<T> {
    return dynamic.Map.new(self)
  }

  @alwaysinline
  def remove(key int) {
    (self as dynamic).delete(key)
  }

  def each(x fn(int, T)) {
    (self as dynamic).forEach((value, key) => {
      x(key, value)
    })
  }
}
"
}
